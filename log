DIAGNOSTIC(S) FROM PARSER:
Info:
Left-hand side of sampling statement (~) may contain a non-linear transform of a parameter or local variable.
If it does, you need to include a target += statement with the log absolute determinant of the Jacobian of the transform.
Left-hand-side of sampling statement:
    beta_1 ~ multi_normal(...)
Info:
Left-hand side of sampling statement (~) may contain a non-linear transform of a parameter or local variable.
If it does, you need to include a target += statement with the log absolute determinant of the Jacobian of the transform.
Left-hand-side of sampling statement:
    beta_1_k[k] ~ multi_normal(...)
Info:
Left-hand side of sampling statement (~) may contain a non-linear transform of a parameter or local variable.
If it does, you need to include a target += statement with the log absolute determinant of the Jacobian of the transform.
Left-hand-side of sampling statement:
    beta_1 ~ multi_normal(...)
Info:
Left-hand side of sampling statement (~) may contain a non-linear transform of a parameter or local variable.
If it does, you need to include a target += statement with the log absolute determinant of the Jacobian of the transform.
Left-hand-side of sampling statement:
    beta_1_k[k] ~ multi_normal(...)

v |  OK F W S | Context
/ |   0       | baggr() calls with full modelv |   0     1 | baggr() calls with full model
--------------------------------------------------------------------------------
test_full.R:4: skip: prepare_ma
Empty test
--------------------------------------------------------------------------------
/ |   0       | baggr helper functions- |   5       | baggr helper functions/ |  12       | baggr helper functionsv |  13       | baggr helper functions [0.3 s]
/ |   0       | baggr() calls with mu and tau model/ |   8       | baggr() calls with mu and tau model| |  10   1   | baggr() calls with mu and tau model- |  10   3   | baggr() calls with mu and tau model| |  10   9   | baggr() calls with mu and tau model, , 1

           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]      [,8]
2.5%  0.2366623 0.2366623 0.2366623 0.2366623 0.2366623 0.2366623 0.2366623 0.2366623
mean  0.6574978 0.6574978 0.6574978 0.6574978 0.6574978 0.6574978 0.6574978 0.6574978
97.5% 0.9861550 0.9861550 0.9861550 0.9861550 0.9861550 0.9861550 0.9861550 0.9861550

\ |  42 1 11   | baggr() calls with mu and tau model/ |  42 2 12   | baggr() calls with mu and tau model- |  42 2 17   | baggr() calls with mu and tau modelx |  51 2 18   | baggr() calls with mu and tau model [4.3 s]
--------------------------------------------------------------------------------
test_mutau.R:46: warning: (unknown)
Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#bulk-ess

test_mutau.R:46: warning: (unknown)
Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#tail-ess

test_mutau.R:48: warning: (unknown)
There were 4 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See
http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup

test_mutau.R:48: warning: (unknown)
Examine the pairs() plot to diagnose sampling problems


test_mutau.R:48: warning: (unknown)
The largest R-hat is 1.08, indicating chains have not mixed.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#r-hat

test_mutau.R:48: warning: (unknown)
Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#bulk-ess

test_mutau.R:48: warning: (unknown)
Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#tail-ess

test_mutau.R:48: warning: (unknown)
Rhat statistic for 2 parameters exceeded 1.05, with maximum equal to 1.08. This suggests lack of convergence.
 No further warning will be issued.
 Stan model saved as $fit in the returned object. 


test_mutau.R:50: warning: (unknown)
The largest R-hat is 1.07, indicating chains have not mixed.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#r-hat

test_mutau.R:50: warning: (unknown)
Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#bulk-ess

test_mutau.R:50: warning: (unknown)
Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#tail-ess

test_mutau.R:108: error: Calculation of effects works
incorrect number of dimensions
1: expect_identical(dim(group_effects(bg5_f)), as.integer(c(200, 8, 1))) at C:\github\baggr/tests/testthat/test_mutau.R:108
2: quasi_label(enquo(object), label, arg = "object")
3: eval_bare(get_expr(quo), get_env(quo))
4: group_effects(bg5_f)
5: treatment_effect(bg) at C:/github/baggr/R/group_effects.R:31

test_mutau.R:116: error: Plotting works
incorrect number of dimensions
1: expect_is(plot(bg5_f, order = FALSE), "gg") at C:\github\baggr/tests/testthat/test_mutau.R:116
2: quasi_label(enquo(object), label, arg = "object")
3: eval_bare(get_expr(quo), get_env(quo))
4: plot(bg5_f, order = FALSE)
5: plot.baggr(bg5_f, order = FALSE)
6: do.call(baggr_plot, l) at C:/github/baggr/R/plot.R:15
7: (function (bg, mean = FALSE, style = "intervals", prob = 0.5, prob_outer = 0.95, 
       vline = TRUE, order = TRUE, ...) 
   {
       m <- group_effects(bg)
       if (!(style %in% c("areas", "intervals"))) 
           stop("plot \"style\" argument must be one of: \"areas\", \"intervals\"")
       ret_list <- lapply(as.list(1:dim(m)[3]), function(i) {
           if (order) 
               mat_to_plot <- m[, order(apply(m[, , i], 2, mean)), i]
           else mat_to_plot <- m[, , i]
           p <- switch(style, areas = bayesplot::mcmc_areas(mat_to_plot, prob = prob, 
               prob_outer = prob_outer, ...), intervals = bayesplot::mcmc_intervals(mat_to_plot, 
               prob = prob, prob_outer = prob_outer, ...))
           p + ggplot2::labs(x = paste("Effect size:", bg$effects[i])) + {
               if (vline) 
                   geom_vline(xintercept = 0, lty = "dashed")
           }
       })
       if (length(ret_list) == 1) 
           return(ret_list[[1]])
       else return(ret_list)
   })(order = FALSE, bg = structure(list(data = structure(list(tau = c(1, -1, 0.5, -0.5, 
   0.7, -0.7, 1.3, -1.3), se.tau = c(1, 1, 1, 1, 1, 1, 1, 1), mu = c(-0.94389698772486, 
   0.239788822285298, -0.761525517060051, 0.112001658770244, -0.50390962298117, 1.76303116383309, 
   0.178224289965228, 0.0668098051795989), se.mu = c(1, 1, 1, 1, 1, 1, 1, 1), state = structure(1:8, .Label = c("Alabama", 
   "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware"
   ), class = "factor")), class = "data.frame", row.names = c(NA, -8L)), inputs = structure(list(
       K = 8L, P = 2, tau_hat_k = structure(c(-0.94389698772486, 1, 0.239788822285298, 
       -1, -0.761525517060051, 0.5, 0.112001658770244, -0.5, -0.50390962298117, 0.7, 
       1.76303116383309, -0.7, 0.178224289965228, 1.3, 0.0668098051795989, -1.3), .Dim = c(2L, 
       8L)), se_tau_k = structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), .Dim = c(2L, 
       8L)), K_test = 0, test_tau_hat_k = structure(numeric(0), .Dim = c(2L, 0L)), test_se_k = structure(numeric(0), .Dim = c(2L, 
       0L)), joint = TRUE, pooling_type = 2, prior_upper_sigma_tau = c(70.5214965440013, 
       98), prior_tau_mean = c(0, 0), prior_tau_scale = structure(c(1000, 0, 0, 1000
       ), .Dim = c(2L, 2L))), group_label = structure(1:8, .Label = c("Alabama", "Alaska", 
   "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware"), class = "factor"), n_groups = 8L, model = "mutau"), 
       prior = list(prior_upper_sigma_tau = c(70.5214965440013, 98), prior_tau_mean = c(0, 
       0), prior_tau_scale = structure(c(1000, 0, 0, 1000), .Dim = c(2L, 2L))), n_groups = 8L, 
       n_parameters = 1, effects = "mean", pooling = "full", fit = new("stanfit", model_name = "mutau", 
           model_pars = c("tau", "tau_k", "Omega", "theta", "sigma_tau", "logpd", "lp__"
           ), par_dims = list(tau = 2, tau_k = c(0, 2), Omega = c(2, 2), theta = 2, 
               sigma_tau = c(2, 2), logpd = numeric(0), lp__ = numeric(0)), mode = 0L, 
           sim = list(samples = list(structure(list(`tau[1]` = c(-0.316043403711669, 
           -0.316043403711669, -0.316043403711669, 0.492348989210963, -0.955963429032805, 
           0.999440244280147, -0.124353818000396, -0.124353818000396, -0.183064585587746, 
           -0.0283506803283952, 0.358397242689986, 0.593069270014827, -0.769795581002944, 
           -0.197626643517332, -0.447699317882507, 0.201986265446705, 0.201986265446705, 
           -0.164049494996841, 0.133000616608426, -0.0930206774679743, 0.117197571055035, 
           0.0758999835594145, 0.311165864461073, 0.311165864461073, -0.198263779134873, 
           0.160051358053865, 0.304838946135439, 0.00971317434649199, 0.0722317648021372, 
           -0.431311433162761, -0.478900596965444, -0.135670390677185, 0.138331938821961, 
           0.138331938821961, 0.535944029496201, -0.109138290656007, -0.0833616331248681, 
           0.554395925400424, -0.0888049089013787, -0.266313737853504, -0.229475485826829, 
           0.253758363173118, -0.0707640580299309, -0.0707640580299309, 0.142936838214208, 
           -0.0563587539657089, -0.0651060025395309, 0.5501530066344, 0.493927879503458, 
           0.238985521918498, 0.238985521918498, -0.219355795815258, 0.240934191030337, 
           0.136086173990802, -0.0873576159912033, 0.108268773424904, -0.0665459053532137, 
           -0.0254852264105733, 0.0674852956297917, -0.0637454669846288, -0.0361432307817511, 
           0.101249618220819, 0.113064731496291, 0.501267091190317, 0.37419830491486, 
           0.197425111581496, 0.197425111581496, -0.503169460046459, 0.197266045690983, 
           0.202518888764446, 0.166428954071142, -0.198499292550311, -0.422571725832336, 
           -0.16980540159264, -0.187565622899247, -0.1422776176431, -0.0314515181509686, 
           0.172217177077808, -0.480468702047301, 0.210229475186443, -0.283070781516199, 
           -0.107147815983574, -0.387739923605291, -0.0740303307184673, 0.121091105291803, 
           0.0822520662155401, 0.342867946274109, 0.342867946274109, -0.283136823355655, 
           0.109054480374347, 0.0617603721355296, 0.299478191485392, -0.0483365712989645, 
           0.103671029097425, 0.0986418757289979, 0.273444433402425, -0.797336156879918, 
           -0.0594294239775273, -0.462408439339416, -0.507446749314098, 0.566999424581355, 
           -0.169018358279033, 0.0414479329599168, 0.196146691250657, -0.162410048789886, 
           0.223262766815372, -0.170275328736415, 0.0144337758385351, -0.257113267107124, 
           -0.209802264992323, -0.272832998673517, -0.0490955819932237, 0.12667261534866, 
           0.0422362091151772, -0.0124572341907204, -0.172394632698354, 0.337814389122497, 
           -0.140802907545058, -0.107612410811666, -0.184823263998189, 0.248847076103867, 
           -0.0183738812378283, -0.0531843292691721, 0.0978094242255426, -0.0766943668378975, 
           0.646550104051456, -1.0318129120498, 1.07109007834936, -0.58957577078683, 
           0.651372101135932, -0.667532052628417, -0.0334649916887706, 0.0397361105520531, 
           -0.0172891015463392, -0.151548246017264, -0.0809674437482305, -0.176785659546502, 
           0.251385020276511, 0.410897788368077, 0.23800627466902, 0.152884315520899, 
           0.257945266946613, 0.304461826589746, -0.323554384618176, 0.269736034708422, 
           0.157360759280846, -0.142970649987215, -0.0346853851683352, -0.115323127830509, 
           -0.365490492379509, -0.303756166645508, -0.375534236737787, -0.417231395252984, 
           -0.981768993688974, 1.00536695229737, -0.9472462806565, 0.361534443972326, 
           -0.367908936303365, 0.468028850569799, -0.276182019393257, -0.266216623361474, 
           0.446617433906061, -0.130908762089563, -0.189335805552313, -0.864355189522369, 
           0.124763665221686, 0.214703210163548, 0.473117565159486, 0.399293244943961, 
           0.249470781113572, -0.186076877987916, 0.260963105540134, 0.141359853616766, 
           0.00242327254324669, 0.0146294069533298, 0.0879217198192053, -0.151347463566779, 
           0.236093566840722, 0.275083131351212, 0.137703987540813, -0.133022778471457, 
           0.226190410928228, -0.162667256692161, 0.336690554254859, 0.0208527067536403, 
           -0.174045110517722, 0.303974657909013, -0.173916074174051, 0.196487217061525, 
           0.0879601894581325, -0.0013609594552273, 0.125119593131321, 0.228648997987697, 
           0.109306643064278, 0.744559379594228, 0.271574487846211, 0.423521164805501, 
           -0.196765123440802, 0.109027476344806, 0.190198523756717), `tau[2]` = c(-0.235114385217174, 
           -0.235114385217174, -0.235114385217174, 0.240129164041407, -0.210905533778586, 
           0.215823954756935, 0.072610122605252, 0.072610122605252, -0.0659071629888717, 
           -0.274236225150262, 0.162991287254098, 0.211635093555613, -0.179320924561987, 
           -0.519805635932095, 0.181324825933473, -0.134385575600911, -0.134385575600911, 
           0.140538766405771, 0.044953038046345, 0.259265101019514, -0.229050310428755, 
           -0.23780533690841, 0.00498552615889375, 0.00498552615889375, -0.0947174874558658, 
           -0.139072773900832, -0.610715368524027, -0.455418560110257, 0.756273451301599, 
           0.459463094807039, -0.343901410866829, -0.290395625682833, 0.283171769911393, 
           0.283171769911393, -0.141949346505425, -0.524211718423466, 0.319990049275271, 
           -0.0538562514379118, -0.220989368944967, 0.0442230235590828, 0.0328942150496183, 
           -0.4916781885442, 0.368510134492703, 0.368510134492703, -0.517395125106575, 
           0.74468771631119, -0.719764666000058, -0.776841756495615, 0.490144403254085, 
           0.163531226040495, 0.163531226040495, -0.157093845976687, 0.107166922099073, 
           0.57804586158506, -0.303838360130061, -0.439202450728106, -0.253029133916518, 
           0.219599029531216, -0.170481152387404, 0.272651538789942, -0.292102034248231, 
           -0.247721974637881, -0.305101623126371, -0.377943215115598, -0.297109320087527, 
           -0.363284744860323, -0.363284744860323, 0.550426511254915, -0.360724236086175, 
           -0.361257083734682, 0.310931004229212, 0.321649907639121, -0.507256293861025, 
           -0.250578109508163, -0.282172677187076, -0.123553306277187, -0.0605250245992294, 
           -0.0518199145745239, 0.827991755294654, 0.240670410665853, -0.335788382504825, 
           0.171742564226477, 0.30950801070426, -0.0202189094334513, 0.0146071528767105, 
           0.101027298115097, -0.19493425652426, -0.19493425652426, 0.157002913861122, 
           -0.168662692710729, 0.193031162848897, 0.592360190960337, 0.0581455001431588, 
           0.312189460169092, -0.280717594318467, -0.238522171367167, 0.45790145823247, 
           -0.474201518136729, 0.0815034317242578, 0.0482447252588077, -0.0488219015676654, 
           0.184058200962887, -0.116523361718852, 0.414946467426162, -0.452136591342615, 
           0.507147051509015, -0.472869881401672, 0.564383602193006, -0.0981581194282887, 
           0.140780625748089, -0.0114328110575273, -0.308841787187614, 0.0111496126509947, 
           0.0905834764887632, -0.179453200287163, 0.0646584861543816, 0.188505089803948, 
           0.287821573524978, 0.748614595368443, 0.714704413586301, -0.739231263443049, 
           0.542866743428198, 0.598469321911995, -0.572604632730751, 0.2210715422303, 
           -0.73511384305336, 0.877366842451981, -0.837682569886523, 0.702339894275619, 
           -0.0206930134126968, -0.475500940967688, -0.153655114882073, 0.0968032094537402, 
           -0.0955487771147562, -0.391536333071547, 0.0721776173807866, 0.1320474489777, 
           -0.147549109030185, 0.0784553526694166, 0.236290247554172, 0.363369272832728, 
           0.230703131677166, 0.333594730038063, -0.554659319181159, 0.603990752712191, 
           0.126135952679013, 0.052851086278679, -0.405657278078182, 0.0835206845685836, 
           -0.077679222413577, 0.156836301296625, 0.215701422066202, -0.0107576827297197, 
           -0.220863696854537, 0.248742397810992, -0.222467309626344, 0.103634362502104, 
           -0.104235590683096, 0.0652948836953139, -0.267664057955581, -0.328323730481267, 
           0.0180919169428981, 0.287255567147008, 0.506165027294623, -0.346511150699561, 
           0.0164138243604229, -0.631857419146659, 0.142434247620419, 0.0958323340741536, 
           -0.205367561166495, 0.210529456763227, -0.176578870239198, 0.1489401951686, 
           -0.662174089354184, 0.688485425348372, -0.715618639729932, 0.746059091519666, 
           -0.116713908903427, -0.0146784561605984, 0.432548472222814, -0.470887036851553, 
           0.385202453913693, -0.518427080162253, 0.032440992961273, -0.386929921961121, 
           0.00761174110841889, -0.134370024166297, 0.111735290400197, -0.355258842545073, 
           -0.2585946712209, 0.239140091721132, -0.579779135763178, -0.182250848711453, 
           -0.270837346444723, -0.347843844049851, -0.631492183923686, -0.247470326361247, 
           0.0380777231417498, -0.264313501881605, -0.193105725834693), `Omega[1,1]` = c(1, 
           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), 
               `Omega[2,1]` = c(-0.874390655686123, -0.874390655686123, -0.874390655686123, 
               0.671511003565655, -0.147917627632118, 0.348407579439354, 0.17864458744594, 
               0.17864458744594, -0.120893388792469, 0.487355648591163, -0.155850920616875, 
               -0.594537616901086, -0.579289654863211, -0.23718847241416, 0.175811684838305, 
               -0.201643633063547, -0.201643633063547, 0.0256224456611221, 0.373273721571807, 
               -0.402843936335703, 0.326008884799394, 0.00872746398638466, 0.0748298612366584, 
               0.0748298612366584, -0.399587172655232, 0.460720695218109, 0.542777996645339, 
               0.735126097916839, -0.646103916179648, -0.510704562125252, -0.131829910602686, 
               0.0980702085878734, -0.149432558693209, -0.149432558693209, 0.109103152377029, 
               -0.180278426115388, 0.376350414033738, -0.0576168729730408, -0.0310131798251139, 
               0.24996099276324, -0.217882285478945, 0.0573366533657612, -0.21846025829021, 
               -0.21846025829021, 0.0702117174278067, 0.436943806928757, 0.429673278038446, 
               0.104493970501215, -0.384912439536292, -0.235467624204364, -0.235467624204364, 
               0.537038176868285, -0.472887582406044, -0.101253671391008, 0.361205857896735, 
               0.492523219680575, -0.155161140540891, 0.211313280179855, 0.320888783194682, 
               -0.234813380461466, 0.0827568043282621, 0.339928597975937, -0.401206672296658, 
               -0.329894993537136, -0.395906455056056, -0.15539343798602, -0.15539343798602, 
               -0.24894593827628, -0.375006844427945, 0.715349773274979, 0.69846746153438, 
               -0.618889424463736, 0.456534271075559, 0.742465498050844, -0.332486130968163, 
               0.16360469863986, -0.162895498241784, 0.00417523599916213, -0.143356484981645, 
               -0.0385774446837947, 0.0931997772509116, -0.120414984079378, 0.862534163577826, 
               0.362177378641078, -0.100391699591334, 0.248568556165906, -0.214007569629284, 
               -0.214007569629284, 0.0138868197959771, 0.00353080636229367, 0.302187936064831, 
               0.144325406152159, 0.17153227703565, -0.185727207186934, -0.269917755303613, 
               0.118932888764968, 0.076063807349508, 0.122486105121125, -0.228324215080823, 
               -0.155479319889268, -0.102840892273272, -0.322302136358304, 0.359254346678633, 
               0.194310575269058, -0.493494710742635, 0.276065302410258, -0.376120426372909, 
               -0.011554780316635, 0.0217195258157111, 0.58138176441882, 0.555681094544679, 
               0.161854361755391, -0.372476314625085, 0.143922281869325, -0.0351848481188212, 
               -0.0335078054860277, -0.0671785281458842, -0.375194366974159, -0.404501126171074, 
               -0.227412717745528, 0.159177282280757, 0.125528366555717, -0.700580373774781, 
               0.478448112163113, -0.424182572375622, -0.0869713516983634, -0.0488942033867838, 
               -0.0498981436388064, 0.494460888419466, 0.209493608205352, -0.348715473353757, 
               -0.364051042500172, 0.195869474242786, 0.0601428432080246, -0.23531105004117, 
               0.552754755777571, -0.673300882205593, 0.495647555243878, 0.701172384458747, 
               0.504270430265952, 0.383335535682075, -0.703967822679838, -0.477231274043564, 
               -0.236436328220061, -0.0536376617846026, -0.0622785754439229, -0.119663686634793, 
               -0.159434755007713, 0.207584823314353, 0.338727684018048, -0.0488782832929294, 
               -0.317916357028818, 0.493401059446357, 0.0971278442173871, 0.125004914485312, 
               -0.582951364520258, 0.646356898392777, -0.672498270137486, 0.725307137035699, 
               0.811020245563777, 0.406964382145369, 0.655784497261118, -0.579130376896385, 
               0.542018849748015, 0.598907591784813, -0.065629631023162, 0.0651568661424971, 
               0.385973674527639, 0.532982419980095, -0.0533883406400948, -0.0486625446945186, 
               -0.0190839894075416, 0.114488153380518, -0.0475831656712007, -0.570601734831673, 
               0.558424633942081, -0.357758298328415, -0.16550033854075, 0.0455676176613477, 
               0.109534070430016, -0.045357220304788, -0.357861044203559, -0.58781142504686, 
               -0.19131237818715, 0.0390310767585592, -0.705802257116688, -0.798908742861573, 
               0.651502342343463, -0.300790797224215, 0.297167787631018, -0.314748500720436, 
               -0.141515641765396, -0.0143489996686912, -0.726293630700022, 0.378100293195387, 
               -0.116408187085303, 0.102062261277431, -0.30381938649629, 0.152711142582348, 
               -0.311251544765419), `Omega[1,2]` = c(-0.874390655686123, -0.874390655686123, 
               -0.874390655686123, 0.671511003565655, -0.147917627632118, 0.348407579439354, 
               0.17864458744594, 0.17864458744594, -0.120893388792469, 0.487355648591163, 
               -0.155850920616875, -0.594537616901086, -0.579289654863211, -0.23718847241416, 
               0.175811684838305, -0.201643633063547, -0.201643633063547, 0.0256224456611221, 
               0.373273721571807, -0.402843936335703, 0.326008884799394, 0.00872746398638466, 
               0.0748298612366584, 0.0748298612366584, -0.399587172655232, 0.460720695218109, 
               0.542777996645339, 0.735126097916839, -0.646103916179648, -0.510704562125252, 
               -0.131829910602686, 0.0980702085878734, -0.149432558693209, -0.149432558693209, 
               0.109103152377029, -0.180278426115388, 0.376350414033738, -0.0576168729730408, 
               -0.0310131798251139, 0.24996099276324, -0.217882285478945, 0.0573366533657612, 
               -0.21846025829021, -0.21846025829021, 0.0702117174278067, 0.436943806928757, 
               0.429673278038446, 0.104493970501215, -0.384912439536292, -0.235467624204364, 
               -0.235467624204364, 0.537038176868285, -0.472887582406044, -0.101253671391008, 
               0.361205857896735, 0.492523219680575, -0.155161140540891, 0.211313280179855, 
               0.320888783194682, -0.234813380461466, 0.0827568043282621, 0.339928597975937, 
               -0.401206672296658, -0.329894993537136, -0.395906455056056, -0.15539343798602, 
               -0.15539343798602, -0.24894593827628, -0.375006844427945, 0.715349773274979, 
               0.69846746153438, -0.618889424463736, 0.456534271075559, 0.742465498050844, 
               -0.332486130968163, 0.16360469863986, -0.162895498241784, 0.00417523599916213, 
               -0.143356484981645, -0.0385774446837947, 0.0931997772509116, -0.120414984079378, 
               0.862534163577826, 0.362177378641078, -0.100391699591334, 0.248568556165906, 
               -0.214007569629284, -0.214007569629284, 0.0138868197959771, 0.00353080636229367, 
               0.302187936064831, 0.144325406152159, 0.17153227703565, -0.185727207186934, 
               -0.269917755303613, 0.118932888764968, 0.076063807349508, 0.122486105121125, 
               -0.228324215080823, -0.155479319889268, -0.102840892273272, -0.322302136358304, 
               0.359254346678633, 0.194310575269058, -0.493494710742635, 0.276065302410258, 
               -0.376120426372909, -0.011554780316635, 0.0217195258157111, 0.58138176441882, 
               0.555681094544679, 0.161854361755391, -0.372476314625085, 0.143922281869325, 
               -0.0351848481188212, -0.0335078054860277, -0.0671785281458842, -0.375194366974159, 
               -0.404501126171074, -0.227412717745528, 0.159177282280757, 0.125528366555717, 
               -0.700580373774781, 0.478448112163113, -0.424182572375622, -0.0869713516983634, 
               -0.0488942033867838, -0.0498981436388064, 0.494460888419466, 0.209493608205352, 
               -0.348715473353757, -0.364051042500172, 0.195869474242786, 0.0601428432080246, 
               -0.23531105004117, 0.552754755777571, -0.673300882205593, 0.495647555243878, 
               0.701172384458747, 0.504270430265952, 0.383335535682075, -0.703967822679838, 
               -0.477231274043564, -0.236436328220061, -0.0536376617846026, -0.0622785754439229, 
               -0.119663686634793, -0.159434755007713, 0.207584823314353, 0.338727684018048, 
               -0.0488782832929294, -0.317916357028818, 0.493401059446357, 0.0971278442173871, 
               0.125004914485312, -0.582951364520258, 0.646356898392777, -0.672498270137486, 
               0.725307137035699, 0.811020245563777, 0.406964382145369, 0.655784497261118, 
               -0.579130376896385, 0.542018849748015, 0.598907591784813, -0.065629631023162, 
               0.0651568661424971, 0.385973674527639, 0.532982419980095, -0.0533883406400948, 
               -0.0486625446945186, -0.0190839894075416, 0.114488153380518, -0.0475831656712007, 
               -0.570601734831673, 0.558424633942081, -0.357758298328415, -0.16550033854075, 
               0.0455676176613477, 0.109534070430016, -0.045357220304788, -0.357861044203559, 
               -0.58781142504686, -0.19131237818715, 0.0390310767585592, -0.705802257116688, 
               -0.798908742861573, 0.651502342343463, -0.300790797224215, 0.297167787631018, 
               -0.314748500720436, -0.141515641765396, -0.0143489996686912, -0.726293630700022, 
               0.378100293195387, -0.116408187085303, 0.102062261277431, -0.30381938649629, 
               0.152711142582348, -0.311251544765419), `Omega[2,2]` = c(1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), `theta[1]` = c(0.0534930651754344, 
               0.0534930651754344, 0.0534930651754344, 0.0640642670933217, 0.184236386456326, 
               2.43534842009209, 59.4864508940061, 59.4864508940061, 3.34873629779921, 
               6.62099135452078, 5.93032785808297, 16.2077155771269, 6.61895438925024, 
               8.20010363211684, 5.31474146843389, 3.33765791374502, 3.33765791374502, 
               7.91939455442719, 4.33701877954672, 2.70279567151779, 10.2847231389227, 
               5.42860185002319, 6.52469886691985, 6.52469886691985, 11.117807504389, 
               6.55985340952829, 6.17408983885534, 4.6329995912799, 2.29646328570477, 
               1.38281315832797, 1.82844400891663, 4.12407241579227, 25.4713686836492, 
               25.4713686836492, 57.9280491942635, 1.75111051791753, 0.0423116978028281, 
               1187.6030990776, 0.0369310844425887, 35.4726727161192, 6.63465218795683, 
               14.6109522976874, 20.5989704811642, 20.5989704811642, 21.9609430621337, 
               11.6431556547546, 13.1500649500733, 3.33888226586285, 12.9793686511715, 
               8.79391486104633, 8.79391486104633, 1.03979181397321, 1.28403074222291, 
               0.214220994874291, 0.51003361282606, 0.801468297846835, 30.9408555881069, 
               18.6842727866883, 8.1329293961398, 6.66030251888942, 8.47264682439771, 
               3.20935233638539, 1.70688936702165, 50.6681398895997, 1.7695726717591, 
               1.98885689356407, 1.98885689356407, 3.09002912672479, 4.99521827220627, 
               284.731915819664, 4.12082076740876, 15.1214973675623, 15.2253565514486, 
               2.33112625356991, 9.31647089013843, 8.25610012789122, 12.1221271604519, 
               41.7624955157756, 88.0902521831449, 93.5122113617882, 176.506712502698, 
               157.943131465252, 90.6632710776369, 65.3798464889771, 4.89237499457177, 
               10.4195672650487, 26.2240681883065, 26.2240681883065, 2.95554541462268, 
               3.52377431291355, 2.73763262900312, 2.32453113267094, 19.5658490489708, 
               6.19090811875285, 5.5437219984773, 3.32651128665833, 4.62208161248582, 
               4.76015264551749, 5.56399688510213, 15.0404815374187, 12.5444851970575, 
               38.7196334804355, 6.76858534294058, 3.42881862448611, 1.08749040629894, 
               3.93552413769045, 27.3731575052616, 3.64638891502583, 0.0147851537621208, 
               0.0757247072956106, 4.4548958257799, 9.41503842566557, 9.55431672583152, 
               20.6932855376177, 5.25340316193369, 14.8904835319747, 8.40854211035642, 
               8.67048444320835, 6.28512992689269, 16.5645056719806, 27.3980525777792, 
               1.36771708290717, 9.60666684086489, 7.0710918219587, 5.25228656854894, 
               3.64808931866096, 2.98497177850732, 7.16820502344982, 8.18054587132221, 
               4.19976114142585, 2.21911536264628, 37.0461085033806, 74.8908642374944, 
               120.092040506197, 112.4133326259, 5.17614153877275, 14.6757069831099, 
               10.2361025877584, 8.93269985021042, 10.5715228476527, 269.34988985085, 
               2.95238461670929, 61.9254148711268, 30.8209087972962, 3.44208648182831, 
               9.02178087987067, 26.6749656202853, 25.3438970947245, 4.69137816282246, 
               5.42943464397742, 6.19526742496568, 101.820347096333, 0.717556134552096, 
               24.1308499974932, 12.1139266088282, 13.2903843079085, 13.4982633126884, 
               1.93352874084719, 2.14843984171861, 3.48075819209436, 0.744676387144675, 
               0.537947079547097, 0.483262343405061, 2.07192794630788, 33.9235257750758, 
               39.5048819076943, 23.2626237556109, 44.3688526203018, 1.48448770149052, 
               2.18734723331859, 5.29639108761328, 3.36771464053548, 25.4229029976946, 
               31.5404799546042, 13.2038318235067, 6.08483443197823, 11.4305092602127, 
               11.8729175760376, 5.71390224608225, 18.4990469056829, 15.5540312411815, 
               0.548768521907896, 9.24077529146581, 6.87176128689163, 2.47234660548796, 
               4.80393047832576, 3.72998102567753, 19.4140812471366, 5.06145737854583, 
               23.6026510166746, 9.30038426828753, 11.6740229697609, 37.6252967363373, 
               1315.27639155214, 1572.54547094325, 1525.5186043301, 14.5223642435329, 
               13.9186789859226, 19.1846746664433, 2.92870875043702), `theta[2]` = c(19.0846645074745, 
               19.0846645074745, 19.0846645074745, 8.04540156171465, 1.91771341690557, 
               10.2578324942017, 3.71391751723704, 3.71391751723704, 2.45899573513669, 
               30.3115419901981, 97.0881363763021, 0.476980679716325, 9.91098657875682, 
               8.41377309127376, 5.06734720817845, 7.25253696076495, 7.25253696076495, 
               6.60233860079731, 28.4598672812074, 59.4752693072659, 2.28449259089014, 
               136.461002688254, 34.3885226757827, 34.3885226757827, 71.9396213031299, 
               13.7514591927685, 11.9811071548079, 12.0017946344064, 9.03487972876527, 
               16.6138079629587, 13.4505680677864, 6.29546376044284, 3.71687564403348, 
               3.71687564403348, 0.11998567343323, 0.39807362373198, 0.142362021178263, 
               2235.78255765757, 38296.0756479754, 0.131834825396005, 0.0491051457153312, 
               6.83104792855184, 12.4398774196912, 12.4398774196912, 22.2809654277336, 
               6.66622495648875, 1.46977444020102, 15.8642430543162, 60.0100376863646, 
               1.82620032827773, 1.82620032827773, 89.3890089495247, 7.89146090397771, 
               7.31384442542339, 10.0468895364296, 24.4672773496451, 24.3349486223511, 
               11.5209121956304, 6.79152311926746, 18.1840004889189, 0.85171655877634, 
               1.07434340399996, 3.31665959733447, 111.104539678928, 1.76417921137117, 
               1.90879173996529, 1.90879173996529, 3.07264999634413, 5.61628298907153, 
               7.19353505570129, 35.475003816797, 349.260890045325, 131.640033821969, 
               5.11862416778711, 52.0435784576129, 17.1599176621345, 13.8994131885361, 
               10.3393997169076, 13.9653755982486, 8.74007322529392, 3.26200970300615, 
               3.69729187350279, 18.8159434625584, 17.1949918891807, 61.9530580242157, 
               170.545288256703, 31.7368839934346, 31.7368839934346, 6.45517215094245, 
               9.23675660904881, 17.8513919811414, 16.7445871796697, 5.27640719173976, 
               6.78494693397582, 4.59820253027357, 4.44103621139146, 6.96689336456021, 
               13.6312406081362, 92.28902546343, 1.54745043072062, 4.7447067524337, 
               10.5227382990031, 8.82184424150405, 15.1731198770668, 17.5478094521367, 
               20.4532017974127, 10.5110265973006, 28.6816872623626, 155.897122219597, 
               0.416058077778961, 0.585179508762148, 2.16396263902087, 1.37371506561736, 
               19.0522108149764, 7.34626204464362, 4.69988910924785, 2.14912854802674, 
               2.93888137781097, 3.2394574160691, 5.54194377066799, 11.6053126057336, 
               3.28041817904366, 3.07986085480578, 11.335587420328, 5.20099680258177, 
               2.75569098691826, 2.07806419843079, 8.37596574970713, 2.74514849930336, 
               4.82563569140483, 5.12604804373541, 19.1016375514335, 14.2769344576269, 
               9.48194561897027, 9.96691896181932, 8.51505010424505, 13.7001174050245, 
               12.6805594653065, 17.5991144400953, 17.6015897198939, 4.85158783619591, 
               42.6420469510299, 11.7737012528084, 2.65530799455232, 14.9639008168073, 
               3.11020843303549, 4.27861138326329, 4.53404818580978, 135.223698946459, 
               139.760741475864, 0.869988284014144, 174.834136985517, 1.82005386305062, 
               2.73877140018645, 1.39480915238268, 2.1059905040323, 4.93086244850845, 
               6.91978169742618, 14.5491430522611, 18.3841782084057, 29.0825320004421, 
               41.8481290332253, 3.53592818528717, 19.3256556545733, 2.3825738716438, 
               4.58546517421547, 5.68652539552551, 0.889726265613363, 12.9324724915048, 
               12.503310468574, 12.9150203995223, 14.6444743149497, 11.684796437739, 
               3.9790439605045, 32.6671154100017, 16.4661288234566, 19.9256360052558, 
               3.02192000538341, 31.4480745947386, 3.35705948524293, 1.99754450237441, 
               6.77598322294639, 17.3010227072935, 21.5661315069531, 4.16775451287257, 
               2.69524298632472, 3.59257267889683, 6.79964507777449, 15.7021048657478, 
               7.96852819631765, 5.28494294680979, 4.83914262517126, 5.3213054656966, 
               2.03164050893947, 4.90024346740567, 5.50817741531414, 11.89553063817, 
               11.353619012756, 11.4266725539934, 1.92739392660124), `sigma_tau[1,1]` = c(0.00286150802186328, 
               0.00286150802186328, 0.00286150802186328, 0.00410423031820446, 0.0339430460944847, 
               5.93092192724502, 3538.637839965, 3538.637839965, 11.214034792198, 43.8375265166389, 
               35.1687885043549, 262.690044229042, 43.810557206975, 67.2416995774557, 
               28.2464768762908, 11.1399603491847, 11.1399603491847, 62.716810108691, 
               18.8097318941409, 7.30510444197531, 105.775530044293, 29.4697180460752, 
               42.5716953039851, 42.5716953039851, 123.605643704649, 43.0316767544999, 
               38.1193853382568, 21.4646852127997, 5.27374362258994, 1.91217223084498, 
               3.34320749374312, 17.0079732906987, 648.790622618385, 648.790622618385, 
               3355.65888345301, 3.06638804596139, 0.00179027977095785, 1410401.12093872, 
               0.00136390499810562, 1258.31050962491, 44.0186096551604, 213.479927045295, 
               424.317584883873, 424.317584883873, 482.283020178279, 135.563073600845, 
               172.924208191146, 11.1481347852934, 168.464010583015, 77.3329385833315, 
               77.3329385833315, 1.0811670164057, 1.64873494697351, 0.0458906346449308, 
               0.260134286212403, 0.642351432453504, 957.336544524086, 349.102049567381, 
               66.1445405625948, 44.3596296431248, 71.7857442109766, 10.2999424190624, 
               2.91347131125156, 2567.26039987204, 3.13138744063665, 3.95555174307734, 
               3.95555174307734, 9.54828000400757, 24.9522055869834, 81072.2638863364, 
               16.9811637971074, 228.659682637194, 231.81148211874, 5.43414961008289, 
               86.7966298467968, 68.1631893217654, 146.945966894165, 1744.10603170518, 
               7759.89252969007, 8744.53367377175, 31154.6195585102, 24946.0327770498, 
               8219.82872249708, 4274.5243269222, 23.9353330875111, 108.567381990874, 
               687.701752344948, 687.701752344948, 8.73524869789715, 12.4169854083493, 
               7.49463241138255, 5.40344498675645, 382.82244900711, 38.3273433348399, 
               30.7328535964012, 11.0656773402653, 21.3636384324796, 22.6590532086271, 
               30.9580613374262, 226.216084877433, 157.364108859195, 1499.21001685926, 
               45.81374754467, 11.7567971596228, 1.18263538379222, 15.4883502383442, 
               749.289751807857, 13.2961521196233, 0.000218600771769553, 0.0057342312950059, 
               19.8460968185512, 88.6429485567592, 91.2849680975038, 428.212066341379, 
               27.5982447818149, 221.726499816009, 70.7035804216372, 75.1773004799179, 
               39.5028581979221, 274.382848157078, 750.653285054754, 1.87065001887609, 
               92.2880477913731, 50.0003395545712, 27.5865141981596, 13.3085556769282, 
               8.91005651848515, 51.3831632582113, 66.9213307528069, 17.6379936450305, 
               4.92447299273272, 1372.41415524425, 5608.64154623882, 14422.098192942, 
               12636.7573520611, 26.7924412294088, 215.376375454101, 104.777796187114, 
               79.7931266139492, 111.757095318442, 72549.3631626653, 8.71657492498164, 
               3834.75700696117, 949.928419091249, 11.8479593483852, 81.3925302443999, 
               711.553790843404, 642.313119947984, 22.0090290666074, 29.4787605532222, 
               38.3813384668409, 10367.3830828176, 0.514886806233345, 582.297921601515, 
               146.747217884077, 176.6343150519, 182.203112458669, 3.73853339168211, 
               4.61579375348388, 12.115677591832, 0.554542921570846, 0.289387060393251, 
               0.233542492553351, 4.2928854146916, 1150.80560101223, 1560.63569454087, 
               541.149663995112, 1968.59508284206, 2.20370373587661, 4.78448791910649, 
               28.0517585529494, 11.341501900077, 646.323996830191, 994.801875766788, 
               174.341174823449, 37.0252100645879, 130.656541947809, 140.966171767383, 
               32.6486788777838, 342.214736418655, 241.927887851651, 0.301146890636977, 
               85.391927987365, 47.2211031840225, 6.11249773766784, 23.0777480405872, 
               13.9127584519144, 376.906550670419, 25.6183507948361, 557.085135014933, 
               86.4971475378102, 136.282812298505, 1415.66295449744, 1729951.98617441, 
               2472899.25818413, 2327207.01215724, 210.899063221842, 193.729624713163, 
               368.051742057271, 8.57733494488635), `sigma_tau[2,1]` = c(-0.892662974150625, 
               -0.892662974150625, -0.892662974150625, 0.346112051150122, -0.0522611601533889, 
               8.70370776653701, 39.4675506867042, 39.4675506867042, -0.995500028197889, 
               97.8086027724292, -89.7334242418318, -4.59623190352147, -38.0016146055487, 
               -16.364536704853, 4.73489706403176, -4.88108405937818, -4.88108405937818, 
               1.33970862926502, 46.0735408370712, -64.7569615236778, 7.65970061381645, 
               6.46523944315638, 16.7899317769993, 16.7899317769993, -319.594160840432, 
               41.5604881315553, 40.1506084168622, 40.8761791699474, -13.4055382346724, 
               -11.7328205170684, -3.24217348680442, 2.54619176897503, -14.1473645949264, 
               -14.1473645949264, 0.758325387573246, -0.125666846441531, 0.00226697638238051, 
               -152985.605648045, -43.8624241431405, 1.16895098481091, -0.0709850817477184, 
               5.72266331734424, -55.9801501448302, -55.9801501448302, 34.3553665880448, 
               33.9137845512237, 8.30456585978484, 5.53492438306352, -299.80537455239, 
               -3.78148058605612, -3.78148058605612, 49.9155287794116, -4.79171237022155, 
               -0.158642128961901, 1.8509096114315, 9.65825579377003, -116.827670140107, 
               45.4872684208927, 17.724284887025, -28.4384702325316, 0.597197397182493, 
               1.17205562430061, -2.27129957850141, -1857.13078869098, -1.23595792227065, 
               -0.589922223594438, -0.589922223594438, -2.36363662499675, -10.5206517957446, 
               1465.20016358841, 102.10625684539, -3268.57019476024, 915.016323423896, 
               8.8592165081675, -161.21005126334, 23.1785318141461, -27.4463364740178, 
               1.80286328999136, -176.359077156429, -31.5294834452175, 53.6613196914239, 
               -70.3177576464343, 1471.40995276168, 407.161956814142, -30.4284823943801, 
               441.708338390173, -178.112124901589, -178.112124901589, 0.264940447633189, 
               0.114921552905846, 14.7680915939778, 5.61762313111656, 17.7085440046228, 
               -7.80146819145621, -6.88051574811494, 1.75701424789953, 2.44937247399019, 
               7.94772969617416, -117.243536945918, -3.61868782582027, -6.12107999632911, 
               -131.317676989182, 21.4515820191376, 10.109177899498, -9.41739629628829, 
               22.22161960197, -108.217364032202, -1.20845192148723, 0.0500627017122858, 
               0.0183169418701746, 1.44861268649282, 3.2975870032747, -4.8887176700268, 
               56.7417681528534, -1.35788448945575, -2.34499757252151, -1.21398572796557, 
               -9.5605247419923, -8.23580907874464, -20.8763872052677, 50.6124806272223, 
               0.56320611158211, -20.7282096371325, 38.3499986246304, -11.5874486278138, 
               -0.874323594804157, -0.303288933850025, -2.99591646707469, 11.1040158168906, 
               4.24570582643606, -3.96674032159472, -257.617566568529, 209.425984497247, 
               68.4850282872829, -263.645930480091, 24.362723651027, -135.373140583037, 
               64.3348085925101, 110.229632601166, 93.8324268470745, 500.933160197925, 
               -88.6265383170237, -347.945186528601, -19.3497139724175, -2.76271722950163, 
               -1.74751309717334, -13.6574333325132, -18.3207195462019, 131.688803660595, 
               257.03395483819, -0.263444663792483, -5659.44287408377, 0.644377251574144, 
               6.4190706194026, 2.11216000133042, -16.3164724159089, 43.0202739505121, 
               -8.99775569800039, 22.6716204590927, 51.8978983224267, 8.81365808911315, 
               14.7630722768056, -0.989606950356398, 21.7031751586968, 48.4068894590096, 
               -11.888693477363, 8.61917835141347, 15.2367483229818, 10.232247858831, 
               -1.46012208255952, -3.32866399317505, -0.941192024597906, 34.010016437101, 
               -5.97173279431702, -246.118272824336, 55.9506121675636, -81.4830897277321, 
               -5.93798782905253, 8.18810099514946, 6.80232875215616, -1.40924292008785, 
               -1.33068707492016, -93.9762711377532, -28.3519793574092, 0.40218143424975, 
               -9.13855818213966, -10.7055592461417, 86.0040827976263, -23.9055093915323, 
               55.8908390973889, -15.4705183833619, -7.9945387343795, -2.87289497238104, 
               -1940.77917780069, 2913.58628859753, -978.15787178111, 17.6313810495389, 
               -48.0117811450845, 33.4768778514396, -1.75694508127352), `sigma_tau[1,2]` = c(-0.892662974150625, 
               -0.892662974150625, -0.892662974150625, 0.346112051150122, -0.0522611601533889, 
               8.70370776653701, 39.4675506867042, 39.4675506867042, -0.995500028197889, 
               97.8086027724292, -89.7334242418318, -4.59623190352147, -38.0016146055487, 
               -16.364536704853, 4.73489706403176, -4.88108405937818, -4.88108405937818, 
               1.33970862926502, 46.0735408370712, -64.7569615236778, 7.65970061381645, 
               6.46523944315638, 16.7899317769993, 16.7899317769993, -319.594160840432, 
               41.5604881315553, 40.1506084168622, 40.8761791699474, -13.4055382346724, 
               -11.7328205170684, -3.24217348680442, 2.54619176897503, -14.1473645949264, 
               -14.1473645949264, 0.758325387573245, -0.125666846441531, 0.00226697638238051, 
               -152985.605648045, -43.8624241431405, 1.16895098481091, -0.0709850817477183, 
               5.72266331734424, -55.9801501448302, -55.9801501448302, 34.3553665880448, 
               33.9137845512237, 8.30456585978484, 5.53492438306352, -299.80537455239, 
               -3.78148058605612, -3.78148058605612, 49.9155287794116, -4.79171237022155, 
               -0.158642128961901, 1.8509096114315, 9.65825579377003, -116.827670140107, 
               45.4872684208927, 17.724284887025, -28.4384702325316, 0.597197397182493, 
               1.17205562430061, -2.27129957850141, -1857.13078869098, -1.23595792227065, 
               -0.589922223594438, -0.589922223594438, -2.36363662499675, -10.5206517957446, 
               1465.20016358841, 102.10625684539, -3268.57019476024, 915.016323423896, 
               8.8592165081675, -161.21005126334, 23.1785318141461, -27.4463364740178, 
               1.80286328999136, -176.359077156429, -31.5294834452175, 53.6613196914239, 
               -70.3177576464343, 1471.40995276168, 407.161956814142, -30.4284823943801, 
               441.708338390173, -178.112124901589, -178.112124901589, 0.264940447633189, 
               0.114921552905846, 14.7680915939778, 5.61762313111656, 17.7085440046228, 
               -7.80146819145621, -6.88051574811494, 1.75701424789953, 2.44937247399019, 
               7.94772969617415, -117.243536945918, -3.61868782582027, -6.12107999632911, 
               -131.317676989182, 21.4515820191376, 10.109177899498, -9.41739629628829, 
               22.22161960197, -108.217364032202, -1.20845192148723, 0.0500627017122858, 
               0.0183169418701746, 1.44861268649282, 3.2975870032747, -4.8887176700268, 
               56.7417681528534, -1.35788448945575, -2.34499757252151, -1.21398572796557, 
               -9.5605247419923, -8.23580907874463, -20.8763872052677, 50.6124806272223, 
               0.56320611158211, -20.7282096371325, 38.3499986246304, -11.5874486278138, 
               -0.874323594804157, -0.303288933850025, -2.99591646707469, 11.1040158168906, 
               4.24570582643606, -3.96674032159472, -257.617566568529, 209.425984497247, 
               68.4850282872829, -263.645930480091, 24.362723651027, -135.373140583037, 
               64.3348085925101, 110.229632601166, 93.8324268470745, 500.933160197925, 
               -88.6265383170237, -347.945186528601, -19.3497139724175, -2.76271722950163, 
               -1.74751309717334, -13.6574333325132, -18.3207195462019, 131.688803660595, 
               257.03395483819, -0.263444663792483, -5659.44287408377, 0.644377251574144, 
               6.4190706194026, 2.11216000133042, -16.3164724159089, 43.0202739505121, 
               -8.99775569800039, 22.6716204590927, 51.8978983224267, 8.81365808911315, 
               14.7630722768056, -0.989606950356398, 21.7031751586968, 48.4068894590096, 
               -11.888693477363, 8.61917835141347, 15.2367483229818, 10.232247858831, 
               -1.46012208255952, -3.32866399317505, -0.941192024597905, 34.010016437101, 
               -5.97173279431702, -246.118272824336, 55.9506121675636, -81.4830897277321, 
               -5.93798782905253, 8.18810099514945, 6.80232875215616, -1.40924292008785, 
               -1.33068707492016, -93.9762711377532, -28.3519793574092, 0.40218143424975, 
               -9.13855818213966, -10.7055592461417, 86.0040827976263, -23.9055093915323, 
               55.8908390973889, -15.4705183833619, -7.9945387343795, -2.87289497238104, 
               -1940.77917780069, 2913.58628859753, -978.15787178111, 17.6313810495389, 
               -48.0117811450845, 33.4768778514396, -1.75694508127352), `sigma_tau[2,2]` = c(364.224419362857, 
               364.224419362857, 364.224419362857, 64.7284862892405, 3.67762474937963, 
               105.2231274791, 13.7931833248401, 13.7931833248401, 6.04666002542043, 
               918.789577823543, 9426.10622502343, 0.227510568822647, 98.2276549642977, 
               70.7915776314424, 25.6780077282339, 52.5992923672617, 52.5992923672617, 
               43.5908749995782, 809.96404566394, 3537.3076591718, 5.21890639783193, 
               18621.6052546835, 1182.57049182282, 1182.57049182282, 5175.30911323775, 
               189.102629930377, 143.546928654989, 144.043074446465, 81.6290517132535, 
               276.01861503007, 180.917781346155, 39.6328639590491, 13.8151645532093, 
               13.8151645532093, 0.0143965618292257, 0.15846260991111, 0.0202669450739601, 
               4998723.64512582, 1466589410.03546, 0.0173804211871951, 0.00241131533572391, 
               46.6632158021724, 154.750550216944, 154.750550216944, 496.441420391859, 
               44.4385551705135, 2.16023690506823, 251.674207686421, 3601.2046231189, 
               3.3350076390017, 3.3350076390017, 7990.39492097821, 62.2751551990087, 
               53.4923202792968, 100.939989357219, 598.647660904458, 592.189724452467, 
               132.731417819425, 46.1247862795444, 330.657873781002, 0.725421096493811, 
               1.15421374971822, 11.0002308845908, 12344.2187372665, 3.11232828983421, 
               3.64348590655972, 3.64348590655972, 9.44117800003355, 31.5426346133342, 
               51.7469465976034, 1258.47589580176, 121983.169315253, 17329.098504649, 
               26.2003133710543, 2708.53405867371, 294.462774171235, 193.193686985651, 
               106.903186505988, 195.031715600157, 76.3888799834997, 10.6407073025063, 
               13.6699671978698, 354.039728386192, 295.66774606899, 3838.18139855183, 
               29085.6953465618, 1007.22980561273, 1007.22980561273, 41.6692474983029, 
               85.3176726548068, 318.672195664361, 280.381199817558, 27.840472853043, 
               46.0355048968679, 21.1434665094142, 19.7228026308902, 48.537603153153, 
               185.8107205169, 8517.26422098962, 2.39460283553743, 22.51224216659, 110.728021309307, 
               77.8249358213582, 230.223566803841, 307.925616568497, 418.333463765686, 
               110.48168012916, 822.63918421597, 24303.9127163519, 0.173104324085124, 
               0.342435057475109, 4.68273430307816, 1.88709308150411, 362.986736938303, 
               53.9675660285715, 22.0889576392265, 4.61875351594351, 8.63702375284408, 
               10.4940843505251, 30.7131407572457, 134.683280676799, 10.7611434294001, 
               9.48554288496501, 128.495542163899, 27.0503677404657, 7.59383281538254, 
               4.31835081279979, 70.156802240267, 7.53584028322747, 23.2867598261602, 
               26.2763685466836, 364.872557146336, 203.830857507374, 89.9072927211095, 
               99.3394735914735, 72.5060782778036, 187.693216911456, 160.796588353174, 
               309.728829075572, 309.815960667474, 23.5379045323241, 1818.34416817384, 
               138.620041190383, 7.05066054593346, 223.918327655246, 9.67339649692509, 
               18.3065153689902, 20.557592951245, 18285.4487567625, 19533.0648578833, 
               0.756879614321874, 30566.9754554706, 3.31259606440547, 7.50086878247923, 
               1.9454925715705, 4.43519600307422, 24.3134044861107, 47.8833787400343, 
               211.677563555158, 337.978008398419, 845.793667556739, 1751.26590358148, 
               12.5027881315082, 373.480966479143, 5.67665825383971, 21.0264908639429, 
               32.3365710739565, 0.7916128277223, 167.248844743527, 156.332772673553, 
               166.797751920078, 214.460627961221, 136.534467791398, 15.8327908396273, 
               1067.14042921037, 271.133398430669, 397.030970213945, 9.13200051893647, 
               988.981395716245, 11.2698483874595, 3.99018403896624, 45.9139486376509, 
               299.325386718284, 465.098028175196, 17.3701776795697, 7.26433475533262, 
               12.9065784531559, 46.2351731837028, 246.556097214939, 63.4974416155095, 
               27.9306219510345, 23.4173013467494, 28.3162918592525, 4.12756315756384, 
               24.0123860398519, 30.3400184385767, 141.503649163641, 128.904664686815, 
               130.568845656186, 3.71484734829933), logpd = c(0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0), lp__ = c(-12.4213965660481, -12.4213965660481, 
               -12.4213965660481, -9.98649557388889, -11.0206567921785, -7.87824334018751, 
               -4.42421523216112, -4.42421523216112, -4.17949704002925, -4.40447123692307, 
               -5.04190234734855, -7.9505510415874, -6.60531610388689, -4.15582272810842, 
               -4.17865549053991, -3.57090035472696, -3.57090035472696, -3.0049092099302, 
               -3.97354803057326, -5.33290647170089, -4.09963710062769, -5.02057178560845, 
               -3.74992951267519, -3.74992951267519, -4.73049808200999, -3.68859955849585, 
               -5.67401595944284, -6.12894297443104, -7.43450172684529, -6.66902669817707, 
               -5.2782702574028, -3.59432649666819, -3.93618969009741, -3.93618969009741, 
               -8.6885405533247, -7.55485125227805, -11.9201302457317, -12.6491604134838, 
               -15.3894892668202, -7.49130268011248, -7.78139208300948, -4.0183509930834, 
               -3.66621721802776, -3.66621721802776, -4.40023638028642, -5.64766739400922, 
               -6.67508994746162, -6.8683782974722, -6.18436629232533, -4.1996550266626, 
               -4.1996550266626, -7.11666303185595, -5.08561362646022, -7.30081934947892, 
               -5.79852007068811, -6.50981863671019, -3.92567339254677, -3.21101373063987, 
               -3.22537842249443, -3.4236334825362, -4.84425305838169, -5.41103768752784, 
               -5.23214970727804, -7.21822402078486, -6.19115561815551, -5.3677265932388, 
               -5.3677265932388, -6.32290522802328, -4.16364165678672, -8.19745604787623, 
               -6.1605494483761, -7.67504097127705, -7.16527269415743, -6.50204803882647, 
               -4.51484671762874, -3.08312009177518, -2.85647846619422, -3.57689042508664, 
               -8.03175394694939, -4.62491273744988, -6.23024558551242, -5.40513354032409, 
               -9.52241528277374, -4.48515907426568, -4.14518243875845, -5.07518580715559, 
               -4.3552497646477, -4.3552497646477, -3.84568958111638, -3.29589339490163, 
               -3.95698663143024, -5.40730626564354, -3.20247175700168, -3.38761221316946, 
               -3.68739250521914, -4.02011988086092, -6.53646588622002, -3.94942750782458, 
               -5.49667724207968, -5.14761213192487, -4.20392069199783, -4.01156553797643, 
               -3.23244522889238, -4.18234237387314, -6.15362342617415, -4.73347599399417, 
               -4.61488358942415, -4.8699114024276, -10.9050586589792, -10.8834840920241, 
               -6.57323522980139, -4.04412071498829, -4.48613939987514, -3.21592989870116, 
               -3.0569310144111, -3.18445774411591, -4.14667519146761, -4.19225639724444, 
               -6.15930482027447, -5.33525103635678, -5.605024191829, -5.75002343044913, 
               -6.73375476918913, -4.86259807765315, -3.90088271216858, -7.54954837604531, 
               -11.703322448779, -9.99380402466672, -7.66686305729565, -4.99814309054947, 
               -6.9261821827442, -4.0943154445444, -4.23604246584532, -4.53283512889929, 
               -5.31399067159374, -4.0495243529458, -4.83453739115786, -3.85682917281274, 
               -5.50698215252708, -4.12872409722352, -6.59946486833177, -6.5950906106345, 
               -5.39554870989921, -5.78517626863216, -4.9637514385998, -3.40384984310526, 
               -3.58193976605801, -4.09266544657865, -5.09069300481215, -5.78521220108406, 
               -5.06796010279952, -7.61572721460345, -7.26705115000932, -7.92861894274833, 
               -8.18201305602817, -8.80467393642733, -5.09083270854599, -6.18006544365186, 
               -6.7023275266931, -7.18229060123779, -6.37475197486369, -8.1256494816007, 
               -7.1280685419008, -6.04708400533187, -9.02095244123396, -3.75849672723194, 
               -4.91502531050553, -6.65067330384148, -5.56664182062327, -3.96773752334116, 
               -3.25378687662946, -3.61348027838545, -3.2636316852118, -5.36806733921782, 
               -6.37581123705233, -6.10652960364736, -5.66259564271089, -3.61165412244293, 
               -3.64720217689126, -4.20412575568997, -4.71602555452704, -6.14256083099208, 
               -5.30448053107108, -3.53860852240818, -4.38872403686868, -5.83253221939563, 
               -7.00262213418737, -4.81343700046818, -3.90944136244339, -3.59967167507737, 
               -3.41627927710659, -4.38505243648198, -3.87626564699042, -10.3819218556738, 
               -10.3334474158929, -9.07380230088379, -3.69405974797226, -3.22337329710291, 
               -3.26980925967613, -4.85866550734827)), test_grad = FALSE, args = list(
               append_samples = FALSE, chain_id = 1, control = list(adapt_delta = 0.8, 
                   adapt_engaged = TRUE, adapt_gamma = 0.05, adapt_init_buffer = 75, 
                   adapt_kappa = 0.75, adapt_t0 = 10, adapt_term_buffer = 50, adapt_window = 25, 
                   max_treedepth = 10L, metric = "diag_e", stepsize = 1, stepsize_jitter = 0), 
               enable_random_init = TRUE, init = "random", init_list = NULL, init_radius = 2, 
               iter = 200L, method = "sampling", random_seed = "1118437368", refresh = 0L, 
               sampler_t = "NUTS(diag_e)", save_warmup = TRUE, test_grad = FALSE, thin = 1L, 
               warmup = 100L), inits = c(-0.616816768909917, 0.971088845056314, 1, 0.883051573810702, 
           0.883051573810702, 1, 0.141240805767176, 1.7181576140376, 0.0199489652137612, 
           0.214293627459379, 0.214293627459379, 2.95206558667537, 0), mean_pars = c(0.025327450335934, 
           -0.0159414147924798, 1, -0.00276737544748763, -0.00276737544748763, 1, 61.8869360979031, 
           15.3347089729522, 66714.7779818926, -55.5424037024453, -55.5424037024453, 
           1088.34372305095, 0), mean_lp__ = -5.52166638983321, adaptation_info = "# Adaptation terminated\n# Step size = 0.344906\n# Diagonal elements of inverse mass matrix:\n# 1, 1, 1, 1, 1\n", elapsed_time = c(warmup = 0.009, 
           sample = 0.007), sampler_params = list(accept_stat__ = c(0.933156182106565, 
           0, 0, 0.99000548123781, 0.874699383586942, 0.999046348479308, 1, 7.7430032303975e-08, 
           0.995763821849397, 0.984948607091449, 0.996065668073632, 0.760630356840068, 
           0.917605067143946, 0.983651738487639, 0.333333333333333, 0.992275122680973, 
           0.270351938748766, 0.999766105385089, 0.984694628074817, 0.980410602541375, 
           0.631766867407752, 0.984552669896798, 0.908058544483227, 0.00057168765905836, 
           0.996639481184888, 0.999337795097384, 0.827653510615565, 0.997640824552234, 
           0.281424220654809, 0.99995244630927, 0.956393178235056, 0.999502606062127, 
           0.857057841341956, 0.0141780754194743, 0.989953783607573, 0.980430706392268, 
           0.97964944873043, 0.723902540088296, 0.986336472103184, 0.406457902781019, 
           0.999725992967009, 0.831067217474491, 0.954326983407586, 0.000643170689873266, 
           0.991637765392323, 0.973727951907293, 0.967634508482963, 0.799856097442482, 
           0.761518582193303, 0.921434329340541, 0.541203496206143, 0.917740337432994, 
           0.988519853994338, 0.668415194711423, 0.840499434734673, 0.407487051582351, 
           0.981703702961148, 0.993663185359205, 0.811718554973611, 0.580455677359802, 
           0.966421831152853, 0.876006807761171, 0.83716901404769, 0.244102759161017, 
           0.994991792451564, 1, 0.547652962368523, 0.857769206771881, 1, 0.520354872244053, 
           1, 0.999149645867076, 0.201634351965113, 0.963380593198976, 0.995468045655271, 
           0.764491185499075, 0.861685705424796, 0.703580068602444, 0.249214365269844, 
           0.99739309719017, 0.952152720178514, 0.949955012296739, 0.409549411961723, 
           0.996259516263013, 0.981527860475766, 0.968175505629742, 0.814110845332565, 
           0.2089810245405, 0.936749367348603, 0.950733199963365, 0.834691111612203, 
           0.811341078475502, 0.999519863783818, 0.551620061621981, 0.893482528876403, 
           0.571239250998832, 0.725595475791867, 0.988270896506521, 0.899788811189419, 
           0.992363281174719, 0.979635396220859, 0.917254380914394, 0.671077697499533, 
           0.912831522029023, 0.887210422281708, 0.876240993866528, 0.988282711556813, 
           0.98461104712338, 0.817151753939845, 0.635521666001165, 0.999513751089007, 
           0.908816917997955, 0.986381160631525, 0.809019571531823, 0.617937047279909, 
           0.955578313195809, 0.946829006099433, 0.937819987132692, 0.849042882262204, 
           1, 0.989387970141085, 0.981076257841382, 0.808734654557891, 1, 0.975066486218991, 
           0.628304907067065, 0.597978228837115, 1, 0.943854778631125, 0.996464701388455, 
           0.875940448282305, 0.975029323639253, 0.765792228868345, 0.957842892951325, 
           0.845281128842025, 0.954623977836332, 0.784032736832995, 0.963049741074785, 
           0.802232045789269, 1, 0.709677245223242, 0.665299220729319, 0.873479574701239, 
           0.739183828900314, 1, 0.998776470458416, 0.981440438312626, 0.914572073469279, 
           0.952739989547435, 0.870208492562513, 0.83412082644317, 0.866210046556669, 
           0.871506013068828, 0.629182828253417, 0.999255759591795, 0.954177542247498, 
           0.988456715604825, 0.932820340244362, 0.785544328406145, 0.878874302124063, 
           0.971511430687698, 0.785628927815535, 0.94263860098419, 0.817047590514376, 
           0.749047485849091, 1, 0.773794734487242, 0.889580590779969, 0.937291691803151, 
           0.964402547939973, 0.990700488503747, 0.993977626504557, 0.994585826422583, 
           0.800184994123517, 0.868347303112461, 0.908987865370012, 0.959727191173987, 
           0.994255885135171, 0.982566850874917, 0.908421801102759, 0.893585131997798, 
           0.962296042616108, 0.883586362061343, 0.904620912417363, 0.880936789629648, 
           0.831542316863962, 0.909734285338996, 0.701284919256206, 0.979656121870497, 
           0.998220498931177, 0.876581901630243, 0.910580826271293, 0.9085248151769, 
           0.573153862826229, 0.834190787432675, 1, 0.989308107991741, 0.863056652445979, 
           0.896508937195761, 0.974740494886437), stepsize__ = c(0.5, 12.7392431662771, 
           2.07678108746565, 0.200667861596485, 0.260403106158257, 0.277620335887056, 
           0.463593951453233, 0.821059270270915, 0.0648648975971636, 0.117465474982444, 
           0.209523330335542, 0.390930955821626, 0.348732760497086, 0.511764373544373, 
           0.922253004893974, 0.220508298196706, 0.409106207201007, 0.0830965878833619, 
           0.157992992825561, 0.284591684849303, 0.501797464972544, 0.312882707909721, 
           0.553427663620994, 0.776532174295938, 0.0792730722097357, 0.144898963616891, 
           0.26422781553043, 0.29451821190896, 0.526131871839228, 0.128787121238736, 
           0.230907235712558, 0.364277618597382, 0.640629626802766, 0.762950753584594, 
           0.0970367075699372, 0.165900099576949, 0.27432189148502, 0.449112098749396, 
           0.378296016925787, 0.62361945577956, 0.235286193613652, 0.39948418838487, 
           0.441975866846515, 0.662335217180387, 0.0947661476790037, 0.15631970128041, 
           0.245143818223487, 0.376440636468209, 0.3848501014015, 0.35908841019084, 
           0.488835485615022, 0.272055374073034, 0.366289965321264, 0.578517831437253, 
           0.43549611916756, 0.487200280384914, 0.203860553595621, 0.314490480030406, 
           0.495640323275133, 0.518048018732904, 0.324359322061162, 0.477339649344711, 
           0.573773505578228, 0.63243134611142, 0.193138916545934, 0.300350123446554, 
           0.469723970547652, 0.279380425135079, 0.321929097900013, 0.499476095417522, 
           0.282797906886418, 0.43693897699343, 0.670769880848522, 0.198461108188636, 
           0.283001087467365, 0.429221608308385, 0.405822359193192, 0.467038234446998, 
           0.390757256361268, 0.132147877897279, 0.199804937984013, 0.275115391860899, 
           0.37599309398287, 0.177706721840944, 0.265542079238225, 0.384136690064535, 
           0.539664822611049, 0.561961287115333, 0.183644214742241, 0.242640917517281, 
           0.328370044310182, 0.355938141822535, 0.368960654608428, 0.54382434547535, 
           0.346560941587088, 0.418202788915233, 0.277689507440223, 0.245815698800819, 
           0.352539928915015, 0.42887555611664, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977, 0.344906453384977, 0.344906453384977, 
           0.344906453384977, 0.344906453384977), treedepth__ = c(4, 0, 0, 3, 3, 3, 
           4, 1, 6, 5, 3, 3, 4, 2, 1, 3, 2, 5, 4, 3, 3, 3, 4, 1, 5, 4, 2, 3, 3, 4, 3, 
           3, 3, 1, 5, 5, 4, 4, 5, 4, 4, 4, 3, 2, 4, 3, 3, 3, 3, 4, 2, 4, 4, 3, 2, 3, 
           4, 3, 3, 3, 3, 3, 3, 3, 4, 2, 2, 2, 2, 3, 4, 3, 4, 4, 4, 4, 2, 2, 2, 3, 3, 
           3, 2, 3, 3, 3, 3, 2, 5, 3, 4, 2, 4, 3, 2, 2, 3, 3, 4, 3, 3, 3, 4, 2, 3, 4, 
           4, 4, 4, 4, 4, 4, 2, 4, 2, 4, 2, 2, 2, 4, 2, 4, 3, 2, 3, 2, 2, 2, 2, 2, 2, 
           3, 2, 3, 2, 3, 4, 2, 2, 2, 3, 3, 3, 3, 4, 4, 3, 2, 4, 2, 4, 3, 4, 4, 2, 3, 
           2, 3, 3, 2, 3, 2, 4, 4, 4, 2, 2, 4, 4, 2, 3, 3, 4, 3, 3, 3, 2, 4, 4, 4, 2, 
           4, 4, 2, 4, 4, 2, 3, 4, 4, 4, 2, 3, 4, 4, 2, 4, 1, 2, 3), n_leapfrog__ = c(15, 
           1, 1, 7, 11, 15, 15, 3, 63, 31, 15, 15, 15, 3, 3, 7, 3, 47, 31, 7, 7, 15, 
           15, 3, 31, 15, 3, 7, 11, 31, 7, 15, 7, 1, 63, 31, 15, 15, 31, 15, 15, 15, 
           15, 3, 15, 15, 15, 11, 11, 15, 3, 15, 15, 7, 7, 7, 23, 15, 7, 7, 15, 7, 15, 
           7, 23, 3, 7, 7, 7, 11, 15, 7, 15, 31, 15, 15, 7, 7, 3, 7, 15, 7, 7, 7, 15, 
           7, 7, 7, 31, 7, 15, 3, 15, 7, 7, 3, 7, 15, 15, 11, 11, 11, 15, 7, 11, 15, 
           15, 15, 15, 31, 31, 15, 3, 15, 7, 15, 7, 3, 3, 15, 3, 15, 7, 7, 7, 7, 3, 
           7, 7, 7, 3, 11, 7, 7, 3, 15, 15, 7, 3, 3, 11, 15, 15, 11, 15, 15, 15, 3, 
           15, 3, 15, 15, 15, 15, 7, 11, 7, 11, 15, 7, 7, 7, 15, 15, 15, 3, 7, 15, 15, 
           3, 7, 7, 15, 15, 15, 11, 3, 15, 15, 15, 3, 15, 15, 7, 15, 15, 3, 11, 15, 
           15, 15, 3, 11, 15, 15, 3, 15, 3, 7, 15), divergent__ = c(0, 1, 1, 0, 0, 0, 
           0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), energy__ = c(17.5354993962999, 
           14.1907567503686, 12.633177484749, 13.9281622403058, 15.4562897630703, 13.9054073593082, 
           7.32885262220988, 9.48036042825808, 6.61008613823719, 6.15872731910741, 7.25418499956042, 
           9.67022374577742, 10.6623061030413, 6.30297374708258, 5.29552472343137, 5.05044801119176, 
           9.15274655562602, 3.98057342087022, 4.57372728610649, 5.56060861200036, 7.13559996300676, 
           6.40714863982096, 5.37716154206601, 7.20127555414575, 5.45830362139435, 5.41528633894394, 
           6.51653859193474, 7.6871085969938, 11.4365022840746, 10.9647004394155, 8.78705992804821, 
           5.32863711901494, 4.7419741349301, 7.37389115645534, 9.81037924211086, 12.0196201569779, 
           14.0653612105396, 15.1800586413593, 18.3978983297826, 18.2341125712103, 8.71190104102882, 
           9.13393034446172, 4.56640661536138, 6.34470657131487, 5.44861091419982, 7.46454825583981, 
           10.1326851741016, 10.5753921238531, 11.6451927139045, 8.05760167693278, 6.67209111799063, 
           8.20905683436198, 9.04079591075723, 9.69348538609974, 9.87309733338167, 10.2081309778155, 
           8.41988409940281, 4.76837018855505, 4.3427258878532, 4.80780761453549, 6.07461204211801, 
           6.38423688757122, 8.40661998816513, 9.5091184329212, 8.82418857559506, 6.44645997058427, 
           8.8521561211223, 7.81117308831489, 6.86554402357201, 10.1659106202078, 9.28587310398311, 
           8.98917476288818, 10.2936620206283, 10.5035051248397, 7.92896951668826, 5.90845626766597, 
           3.75748128486245, 4.98714421856543, 9.94417683059432, 9.4725026093754, 7.27721055032074, 
           7.14998930921546, 13.6315404968793, 9.85958084505745, 8.33689817213563, 5.52255267036933, 
           6.10362108409649, 7.25841084297947, 9.15066727059889, 4.98383614536884, 5.34481760408749, 
           5.75541737864287, 5.09955689600836, 4.73257031674086, 5.10443322623695, 7.61842808803684, 
           8.22224759071423, 8.19816386342089, 6.90206624264332, 6.61763331974519, 5.98661355637282, 
           5.84563674023815, 8.11159144058806, 5.14185895904164, 7.22488763734789, 8.26306826051419, 
           5.92814943614038, 6.50860081430808, 13.9759299699766, 16.9836227900494, 11.7008458022271, 
           10.21674425703, 4.92393208829066, 6.40533904048002, 7.71804679220959, 3.8664546685106, 
           4.9291371754826, 5.13576988723392, 6.74969524908542, 7.0539702698241, 6.46906826555735, 
           7.27210788668437, 8.84847290318759, 7.36662843729095, 5.68938084765042, 8.49359660469743, 
           12.263573751185, 12.8014045097193, 11.9803507381504, 8.82661625432338, 7.83775230235657, 
           7.53438855386149, 6.58771681577392, 5.19493629604071, 5.64841019046144, 6.83294445907854, 
           6.96758317454089, 5.50848173311728, 6.79072273225382, 5.60684040014273, 9.72598456735963, 
           14.5189507483982, 9.50425812685856, 10.0790046570092, 6.57797927967687, 5.61948709029739, 
           4.18808328572974, 4.44840106988902, 6.57878383484221, 6.44007422989208, 9.15331726689608, 
           10.5386796648358, 10.2227534569, 15.1781944503664, 9.35015435647617, 10.3940460570362, 
           9.71457682901911, 8.35886912435191, 9.43399448975657, 10.2657398796397, 10.814412720503, 
           10.458798641811, 11.4563793342265, 11.5041703438802, 10.8409234338762, 8.69378181880913, 
           5.99819370314198, 11.522348356425, 8.95020466197795, 6.08734664694356, 4.31338053036791, 
           3.82572436293247, 4.11816018548222, 6.47219318264061, 10.10004106459, 8.981325167934, 
           7.47352956192536, 6.20903266746836, 4.69026191062932, 6.4883507420398, 5.88546083807492, 
           8.25672632552591, 8.52887016741765, 6.97582159353463, 6.03294773322555, 7.21339689568587, 
           8.25994720614183, 11.6107486240743, 5.50010902291508, 4.61215918437685, 5.16137039605547, 
           4.7304560386986, 6.84624467686434, 13.0938097225143, 13.4099212949867, 11.6225688451479, 
           10.4088043343984, 5.07657511336519, 4.75447122516182, 5.23792150928918)), return_code = 0L), 
               structure(list(`tau[1]` = c(0.119680171393546, 0.119680171393546, 0.119680171393546, 
               0.358803363852888, -0.322305920048723, -0.631850353172769, 0.398752957544611, 
               -0.340653929279439, 0.37495106005188, -0.0628376296186959, -0.401706728822439, 
               -0.175292882232023, 0.210886553467946, -0.0608360108077913, -0.246693900667562, 
               -0.24413503703574, -0.1143685830815, 0.00380124203483026, -0.496823698929749, 
               -0.251251696493323, -0.211220354262953, 0.134221106106782, 0.134221106106782, 
               0.326596375598961, -0.140709253525621, -0.262572349506245, -0.222411086170008, 
               -0.425024355168239, -0.425024355168239, -0.552498794047608, -0.218565632121789, 
               0.0796192160247625, -0.209952757106897, 0.0246072319480194, 0.0246072319480194, 
               0.389616253211664, 0.0718986220584506, 0.210012285925015, -0.0914252391572853, 
               -0.0914252391572853, -0.289596299424267, 0.360109845040608, 0.32876083397878, 
               0.101779362483094, 0.288206504594117, 0.171221288962379, 0.0291603064029354, 
               -0.358893739312655, 0.116725279734426, 0.116725279734426, 0.295750611133568, 
               -0.163082070952033, -0.0596768805173642, 0.547488513034471, -0.318192263982702, 
               0.134750402496363, -0.107346728724328, -0.0878195164533132, 0.291733041238987, 
               0.245278726357578, -0.655838841908358, -0.298080983242153, -0.387509716344174, 
               -0.387509716344174, 0.441943330513818, 0.170388205616745, 0.526303000116118, 
               0.331162774590209, 0.196086429572325, -0.316779996102722, 0.424064024037487, 
               -0.389874724091817, -0.389874724091817, -0.17319960094232, -0.164293758886663, 
               0.211690973410672, 0.265136160031249, 0.0762608269681915, -0.130560012925178, 
               0.0356334621300609, -0.0442529514319909, 0.198074797730508, 0.298119667591665, 
               0.313783966339079, 0.705146645110384, -0.442030011558743, -0.442030011558743, 
               0.36243938972849, 0.0144633829243981, -0.267322266001232, 0.269220231963142, 
               -0.0797356212566367, 0.314806922891114, 0.0176192485105773, 0.0176192485105773, 
               0.0148450996037041, -0.0245615413344946, -0.0910811953362921, -0.713780347092786, 
               0.373677136041274, -0.590925323021337, 0.594174186589035, -0.558688165682502, 
               0.348529097094648, 0.0476322305391239, 0.154236249150415, 0.298054143224223, 
               0.280478457782284, -0.395975003780257, 0.10102250629529, -0.0370361083823248, 
               0.128909969596307, -0.256194591025274, 0.675844672888501, -0.182592163389541, 
               0.162525331908694, -0.00130984910773305, 0.0357637697198216, -0.269046816655355, 
               0.591996471616529, -0.462167078161477, -0.276627115972053, -0.258219236040115, 
               0.122426041093519, 0.192816245745551, -0.0669772258333367, 0.296097335631548, 
               -0.851134208184574, -0.275280563904162, 0.182317665753768, -0.294922578840944, 
               -0.190862945946011, 0.330789192662033, -0.327343836546092, 0.529273581581793, 
               0.890845321566428, 0.0508316559416851, -0.0200978495133031, -0.146159208903376, 
               -0.443948584172433, -0.0805554428947109, -0.157988455882587, -0.525629007928038, 
               0.230576745679539, -0.389594705400247, 0.870337758098685, -0.135438135144616, 
               -0.277706423658412, 0.234254317331748, 0.234458333296292, -0.185322905134316, 
               -0.21930640794808, -0.499745650876647, 0.472287746929963, -0.414276457774255, 
               0.40084986361502, -0.621261271307135, 0.584497401870795, 0.584632833366516, 
               -0.00125310283673996, 0.336630627599387, -0.560291328525189, 0.72436257270907, 
               -0.35363080706692, -0.463414537041633, -0.322030202361526, 0.335400721008865, 
               0.553886464272653, 0.586893425995728, -0.482950997160887, 0.299375889801535, 
               0.236769604612984, 0.345503196412419, 0.345584648304154, 0.376765969275501, 
               0.291343111928945, -0.0395029991573742, 0.389708466408249, -0.435870918452806, 
               0.163239649092054, 0.0512258994375944, -0.278293128827223, 0.315197953912321, 
               0.268391712464388, 0.124777128339062, -0.323566434037396, 0.257471309172371, 
               -0.239012413967994, -0.254866767387376, 0.0528927102371915, 0.173685250412453, 
               0.615616097783536, 0.0338959094789866, 0.0379042454954322, 0.00691888394421089, 
               -0.205274657809552, 0.236195124494934, 0.284794967644537, 0.189649723618175, 
               0.597789133439504), `tau[2]` = c(0.0916159375887433, 0.0916159375887433, 
               0.0916159375887433, -0.26697911206446, 0.543202013472207, 0.120604606241732, 
               -0.330805644454502, -0.0372998559193944, 0.0453149649171753, 0.0398818122487738, 
               0.321312946823619, 0.441108077657616, -0.4303699151002, 0.384659690154429, 
               -0.0267081017930785, 0.015407075450618, -0.0996430908615502, -0.685286748802199, 
               -0.0267308343338883, -0.387768591770961, 0.22975811489497, 0.292990110341846, 
               0.292990110341846, 0.599016763063389, -0.520693432177558, -0.519079072177266, 
               -0.492841602692295, -0.130530696428858, -0.130530696428858, 0.424176370859913, 
               -0.135382442875331, 0.139332504830323, 0.188090638971858, -0.0429294017538819, 
               -0.0429294017538819, -0.316872629899158, 0.366832866149716, -0.220649555211056, 
               -0.0452094551966979, -0.0452094551966979, 0.350529894424706, -0.293125060670635, 
               -0.275534801606125, -0.741097873346834, 0.0459188905035154, 0.154824588454665, 
               0.619807684415796, 0.0750702714243039, 0.0562353304972612, 0.0562353304972612, 
               0.110937054472323, 0.388979721916841, -0.0485769480315492, -0.27622675540759, 
               0.411746096211495, -0.124750727575581, 0.11986893408174, 0.190475422617206, 
               0.582574723227416, 0.88595226200815, 0.0925250457039446, 0.444397965398317, 
               -0.154748339076441, -0.154748339076441, 0.380226616448309, 0.212801491697987, 
               -0.234594112473606, 0.486105078579323, 0.121939329042461, 0.172279998372905, 
               -0.209203840311854, 0.218019015627204, 0.218019015627204, 0.24827230259262, 
               -0.493679103042666, -0.084214979577968, -0.331623501681683, 0.0262275088769306, 
               -0.545472852330895, 0.410779487207577, 0.304938534864051, 0.266198661187336, 
               0.241317277392832, -0.0355861030271132, -0.060103754264343, 0.0679851367664474, 
               0.0679851367664474, 0.793293599942855, -0.324734336763972, 0.43497125839656, 
               -0.512841494312938, 0.484711412081245, -0.509114030122688, 0.0475125766439425, 
               0.0475125766439425, -0.139630551091523, 0.965740725268406, -0.2553303262354, 
               0.113494832830189, 0.669886880295155, -0.654303585945916, 0.539973951337432, 
               -0.121707202939106, 0.0457133395608768, -0.0662763491763812, -0.0189371835611582, 
               0.145310676317803, 0.264580955870126, -0.413301414692336, 0.259074708802856, 
               -0.218889308651794, -0.861334690963606, 0.640853141323907, -0.198259262930216, 
               -0.0884221521459183, 0.210225996519762, -0.157435911122245, 0.935797456347, 
               0.349215946286826, 0.00426967814379869, 0.195496544056809, 0.322835846781452, 
               0.441340372248522, -0.460064239262407, 0.15972083944941, 0.212762372136523, 
               -0.0509770981729734, 0.203941608206163, 0.112459597788436, 0.0451281095515048, 
               -0.307070637813945, 1.04258382770607, -0.37624422244716, 0.368862353926473, 
               -0.415801691183525, -0.349372508481179, -0.0322693932065924, -0.0458567762706074, 
               -0.559443617423088, -0.392259849068678, 0.0800069598192677, 0.10835686872219, 
               -0.234432230289447, 0.40087417571171, -0.198637253998765, -0.108931232454049, 
               -0.280523705337369, -0.161506074626262, 0.928526501242629, 0.928466430053266, 
               -0.331668699124973, -0.550419374311804, -0.216307785705237, 0.296495170265476, 
               -0.0982054860066189, 0.000346371463238626, -0.213816125174155, 0.320732081808591, 
               0.303251608855925, -0.0475881652139385, 0.348560957056026, -0.224999575386578, 
               0.140959466556053, -0.0929426657757375, 0.283992260786389, 0.52351197999924, 
               -0.170556525364798, -0.41024322376406, -0.216920298947068, 0.418191382140357, 
               -0.2635285719726, -0.299076869568456, -0.289660736659463, -0.28962488255252, 
               0.232362144750252, 0.464272728124402, -0.378237696158572, 0.12121813753937, 
               -0.36437717702986, -0.342503205684705, 0.146064153263621, 0.0231083193012197, 
               0.674816756319881, -0.535099973788179, 0.407490949370914, -0.236797604293444, 
               -0.58406245604824, 0.618595496983067, 0.0890007736111298, 0.0678188684368353, 
               -0.517240525094538, -0.129465724673344, -0.000977583238440161, -0.533491729607971, 
               -0.339358143257381, 0.345375189768361, 0.259943059295513, -0.325789425249086, 
               -0.0997036001929271, 0.0103748912744163), `Omega[1,1]` = c(1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), `Omega[2,1]` = c(-0.92558676962884, 
               -0.92558676962884, -0.92558676962884, 0.335673676849644, 0.423593308737189, 
               0.156514559259569, 0.217034732913515, -0.105871842916815, 0.434812871253867, 
               0.17379454487768, 0.234514986505123, 0.206428924503117, -0.157022152704437, 
               0.766923945388361, -0.592152824483303, -0.618014324139793, 0.681236525672191, 
               0.0858282325981805, 0.385069945651517, 0.219879029171245, 0.389175173090594, 
               0.0667027011573283, 0.0667027011573283, -0.0944866117427067, -0.333191148332758, 
               0.296426536372673, 0.187508022678757, -0.390362120782872, -0.390362120782872, 
               -0.189733530719842, 0.298251244048406, 0.0929022916798625, -0.424451089582232, 
               0.378031706025003, 0.378031706025003, 0.208042590189541, -0.0127712250601912, 
               -0.0527612501532211, 0.025930580630436, 0.025930580630436, -0.0954000155253428, 
               -0.165322406182325, 0.33133132082207, 0.11139978236541, 0.115138804763058, 
               0.254945994353678, -0.000178336373651281, 0.304450063059147, 0.299462224264182, 
               0.299462224264182, -0.235390995708923, -0.213251620272378, -0.146657154665774, 
               0.160710461503207, -0.0288269544916401, -0.386984335224985, -0.379287185961203, 
               -0.408541865305051, -0.199814653624879, -0.238050086186386, 0.590436520910995, 
               -0.58156484312589, -0.59854258585499, -0.59854258585499, 0.538684086298543, 
               -0.801444500051238, -0.854713362423594, 0.859716705023129, -0.858725848013341, 
               0.0903746997188387, -0.387445520558072, -0.362915039256417, -0.362915039256417, 
               -0.213540147776938, 0.590373426561579, -0.46982091717577, 0.511480252508476, 
               -0.382854200999032, 0.224963330422651, -0.0230561092017393, -0.569286276910683, 
               -0.151243606560851, -0.301744998994767, -0.2758602342082, 0.171818202029605, 
               -0.426778473777102, -0.426778473777102, 0.0559118722356137, -0.126283790129416, 
               0.42274449815182, -0.323025627402862, 0.239057812166108, 0.371474891205442, 
               0.52882883912079, 0.52882883912079, -0.422752656453071, 0.290990527746344, 
               0.111110522979782, 0.214673174081293, -0.438074857208535, 0.496629621442465, 
               -0.263731837176627, 0.356555341315597, -0.14903086582022, 0.324694140432176, 
               -0.305267114945903, 0.582100567429599, 0.411893748781336, -0.0997023517244073, 
               -0.431210469159564, 0.425049050084043, -0.0725814904997673, 0.00208618960770884, 
               -0.0693431108388321, 0.601410991676802, -0.601887361879229, -0.0966589958899904, 
               -0.322951084329034, -0.428434011558175, 0.416036753050538, 0.00595843125799094, 
               0.0649704664748154, 0.0260266423731512, -0.151533532540017, 0.33779300608261, 
               -0.341130762648741, -0.208251994432022, 0.235695659455818, -0.0715854340504013, 
               -0.041890982981607, 0.15762141730492, -0.461319644194449, -0.212804069947102, 
               -0.254553791917284, 0.426417224077465, 0.555127196035266, 0.324010030560895, 
               0.377888416911684, -0.529715867551152, -0.162233142755828, -0.30385099072852, 
               -0.52237537179258, -0.389991489766252, 0.0580602644448679, -0.367364146416689, 
               -0.538775412106147, 0.290816416539575, -0.282093695948017, -0.339217523402208, 
               0.228320606670553, -0.206396910397533, -0.323243164331935, -0.281835083018808, 
               0.807192159045541, 0.125339634417757, -0.0250271192450467, -0.00449703825364055, 
               -0.00975291334018103, -0.00742831397267855, 0.0309331565062073, -0.430659994287944, 
               0.419360478850305, -0.178496940603996, -0.569729988575507, 0.420019263599252, 
               0.182112298600758, 0.373499176818426, 0.52299048364187, 0.412903146759512, 
               -0.412815709992506, -0.112901309473045, 0.314135230407438, 0.140023461311429, 
               -0.101660700575236, -0.0163498222457735, -0.274586092580619, 0.505708345088665, 
               -0.507206661724041, -0.508262924472645, -0.458103037837985, 0.473256521539609, 
               0.307660991668336, 0.51371975736926, -0.511708083350374, 0.114998660194512, 
               -0.140955587906779, -0.173671625518876, -0.17063401634023, 0.482543200098545, 
               -0.18029174397318, -0.65117104716166, -0.608435458408242, -0.267914173037806, 
               0.282724311571798, 0.345333740795476, -0.315532938654189, 0.23167327457414, 
               0.232489766769089, -0.46688586879591, -0.694346004040986), `Omega[1,2]` = c(-0.92558676962884, 
               -0.92558676962884, -0.92558676962884, 0.335673676849644, 0.423593308737189, 
               0.156514559259569, 0.217034732913515, -0.105871842916815, 0.434812871253867, 
               0.17379454487768, 0.234514986505123, 0.206428924503117, -0.157022152704437, 
               0.766923945388361, -0.592152824483303, -0.618014324139793, 0.681236525672191, 
               0.0858282325981805, 0.385069945651517, 0.219879029171245, 0.389175173090594, 
               0.0667027011573283, 0.0667027011573283, -0.0944866117427067, -0.333191148332758, 
               0.296426536372673, 0.187508022678757, -0.390362120782872, -0.390362120782872, 
               -0.189733530719842, 0.298251244048406, 0.0929022916798625, -0.424451089582232, 
               0.378031706025003, 0.378031706025003, 0.208042590189541, -0.0127712250601912, 
               -0.0527612501532211, 0.025930580630436, 0.025930580630436, -0.0954000155253428, 
               -0.165322406182325, 0.33133132082207, 0.11139978236541, 0.115138804763058, 
               0.254945994353678, -0.000178336373651281, 0.304450063059147, 0.299462224264182, 
               0.299462224264182, -0.235390995708923, -0.213251620272378, -0.146657154665774, 
               0.160710461503207, -0.0288269544916401, -0.386984335224985, -0.379287185961203, 
               -0.408541865305051, -0.199814653624879, -0.238050086186386, 0.590436520910995, 
               -0.58156484312589, -0.59854258585499, -0.59854258585499, 0.538684086298543, 
               -0.801444500051238, -0.854713362423594, 0.859716705023129, -0.858725848013341, 
               0.0903746997188387, -0.387445520558072, -0.362915039256417, -0.362915039256417, 
               -0.213540147776938, 0.590373426561579, -0.46982091717577, 0.511480252508476, 
               -0.382854200999032, 0.224963330422651, -0.0230561092017393, -0.569286276910683, 
               -0.151243606560851, -0.301744998994767, -0.2758602342082, 0.171818202029605, 
               -0.426778473777102, -0.426778473777102, 0.0559118722356137, -0.126283790129416, 
               0.42274449815182, -0.323025627402862, 0.239057812166108, 0.371474891205442, 
               0.52882883912079, 0.52882883912079, -0.422752656453071, 0.290990527746344, 
               0.111110522979782, 0.214673174081293, -0.438074857208535, 0.496629621442465, 
               -0.263731837176627, 0.356555341315597, -0.14903086582022, 0.324694140432176, 
               -0.305267114945903, 0.582100567429599, 0.411893748781336, -0.0997023517244073, 
               -0.431210469159564, 0.425049050084043, -0.0725814904997673, 0.00208618960770884, 
               -0.0693431108388321, 0.601410991676802, -0.601887361879229, -0.0966589958899904, 
               -0.322951084329034, -0.428434011558175, 0.416036753050538, 0.00595843125799094, 
               0.0649704664748154, 0.0260266423731512, -0.151533532540017, 0.33779300608261, 
               -0.341130762648741, -0.208251994432022, 0.235695659455818, -0.0715854340504013, 
               -0.041890982981607, 0.15762141730492, -0.461319644194449, -0.212804069947102, 
               -0.254553791917284, 0.426417224077465, 0.555127196035266, 0.324010030560895, 
               0.377888416911684, -0.529715867551152, -0.162233142755828, -0.30385099072852, 
               -0.52237537179258, -0.389991489766252, 0.0580602644448679, -0.367364146416689, 
               -0.538775412106147, 0.290816416539575, -0.282093695948017, -0.339217523402208, 
               0.228320606670553, -0.206396910397533, -0.323243164331935, -0.281835083018808, 
               0.807192159045541, 0.125339634417757, -0.0250271192450467, -0.00449703825364055, 
               -0.00975291334018103, -0.00742831397267855, 0.0309331565062073, -0.430659994287944, 
               0.419360478850305, -0.178496940603996, -0.569729988575507, 0.420019263599252, 
               0.182112298600758, 0.373499176818426, 0.52299048364187, 0.412903146759512, 
               -0.412815709992506, -0.112901309473045, 0.314135230407438, 0.140023461311429, 
               -0.101660700575236, -0.0163498222457735, -0.274586092580619, 0.505708345088665, 
               -0.507206661724041, -0.508262924472645, -0.458103037837985, 0.473256521539609, 
               0.307660991668336, 0.51371975736926, -0.511708083350374, 0.114998660194512, 
               -0.140955587906779, -0.173671625518876, -0.17063401634023, 0.482543200098545, 
               -0.18029174397318, -0.65117104716166, -0.608435458408242, -0.267914173037806, 
               0.282724311571798, 0.345333740795476, -0.315532938654189, 0.23167327457414, 
               0.232489766769089, -0.46688586879591, -0.694346004040986), `Omega[2,2]` = c(1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), `theta[1]` = c(1.16539732973035, 
               1.16539732973035, 1.16539732973035, 2.8144006769266, 1.84149834594776, 
               1.30060747405547, 3.1194833977955, 8.26388599021559, 8.08786158820296, 
               8.71767048672668, 13.3823268400186, 0.714609998418899, 5.8701383660999, 
               4.8984990013583, 81.9255731548714, 18.5680073770022, 9.85191187481913, 
               7.10355671607755, 177.51683426836, 125.085455252092, 114.770378048899, 
               2.65099550465778, 2.65099550465778, 2.62428125101826, 3.62751227103053, 
               4.30121470541562, 141.805944431602, 103.229784080931, 103.229784080931, 
               71.1522769375433, 65.802888255653, 54.1167311377281, 3.99719480422496, 
               0.439498771636697, 0.439498771636697, 2.2734147063053, 2.3175103151387, 
               4.18889847007779, 10.6809456728315, 10.6809456728315, 12.677457452463, 
               22.2308563811186, 10.4464192866796, 4.25906084384426, 4.08578949830939, 
               6.74623352223146, 14.2646843297311, 82.6245156707319, 71.8838630293558, 
               71.8838630293558, 1.72382282673597, 22.9128485668679, 85.2952745127103, 
               41.163568060919, 194.462954333848, 190.652217899479, 1.04429015048318, 
               5.48517804029331, 3.48141446935936, 3.1509588139093, 3.13914478892766, 
               37.416312937476, 15.2639936079882, 15.2639936079882, 64.8841475163322, 
               1.18361781314462, 0.858319677443599, 5.04829550647579, 6.26496545841638, 
               19.0266143328324, 22.2183069005924, 4.34110633686089, 4.34110633686089, 
               0.8374624713017, 0.747479236802213, 1.08395174685527, 2.2957464531912, 
               9.33465354770523, 5.2886398977754, 17.8930711301613, 2.03609172940062, 
               11.222892404181, 14.4599455522132, 352.174611433657, 14.5032002735619, 
               24.6683069758578, 24.6683069758578, 14.1667649987473, 24.1943960100013, 
               18.4369048607984, 6.86050241676421, 3.4150010806349, 2.30114861604868, 
               2.58231613672323, 2.58231613672323, 5.27740329373866, 38.1960403445994, 
               75.9725330187261, 61.4736190657553, 89.5229327407058, 123.937596528102, 
               0.823046493543147, 0.885992642113094, 0.720277335616058, 19.6948531827099, 
               14.8794809364954, 8.20504783584026, 7.40431443210468, 15.4979949360456, 
               10.2838036573554, 1.03741512827048, 0.956755051845015, 0.893213484291648, 
               101.071968127406, 78.5537785165627, 10.8390926349769, 18.1501638779864, 
               15.8775491377508, 12.1215984103868, 2.73307591160899, 3.69886428894257, 
               14.8536474615314, 8.20138313538642, 14.7581841920192, 16.3367269218368, 
               3.02687826795923, 1.92921234908925, 4.10410626841801, 4.65676991648672, 
               6.24160618449652, 5.96173740678414, 9.68061705844265, 18.9088692916725, 
               0.762306085763459, 0.793595146173899, 40.5029864328634, 44.3680815155935, 
               40.1908263672681, 99.8559782611052, 0.978652790192244, 1.40887675007791, 
               0.848139481343898, 117.726318667304, 8.46870548340075, 23.2304310040313, 
               17.788831035971, 1.35997636361801, 41.5207173792215, 43.347520479177, 
               1.6919689469362, 25.6167072007266, 1.86970061300951, 65.1098460765154, 
               90.9925222806097, 83.2994622353494, 50.1673135883142, 7.82910361144669, 
               6.31119597242328, 5.87467626049298, 21.9781952767166, 1.59463590086484, 
               10.859283763412, 6.66141478431985, 13.7122647880476, 13.1452137436212, 
               1.45747693088726, 29.4194990864168, 4.70915650466301, 9.79077381748659, 
               5.43081766146595, 18.1665144148579, 3.26493452998053, 3.86806415887953, 
               40.5425160324269, 1.23829918320482, 43.9776295488758, 25.7698708607514, 
               2.38580527992084, 50.9046415990329, 37.1422115348863, 3.29384961535744, 
               19.956710938647, 14.3571443643857, 14.427758695657, 15.9725541099519, 
               17.4742910517022, 12.9172552178215, 8.16761213130028, 11.1634283369131, 
               8.05039168110452, 4.47071494347511, 27.0525990646114, 24.493654538818, 
               19.1146692458988, 15.8497565722373, 12.3342917758281, 5.62798699721906, 
               29.0646162448989, 26.024666860944, 21.6732992772572), `theta[2]` = c(2.95985980523609, 
               2.95985980523609, 2.95985980523609, 6.51878838566917, 12.3892812475936, 
               12.7295911032727, 9.97045082877041, 30.7052582798174, 29.5210907226648, 
               7.43517491539801, 2.94372015497851, 33.7342273955427, 11.246873588269, 
               5.84493172838505, 1.18962047476369, 0.481426364576965, 362.840288668264, 
               278.003437507434, 2.48512228918503, 52.1421118999172, 30.4545007197661, 
               6.02554302046509, 6.02554302046509, 5.47550934012645, 6.80210514203655, 
               5.14612168756149, 22.2065434096057, 6.02896338377955, 6.02896338377955, 
               3.70099985852503, 4.75527854269873, 10.9191165409643, 6.30421836647811, 
               1.52030585653861, 1.52030585653861, 1.62205536714156, 1.15629249747743, 
               3.22874273416144, 17.6367650592517, 17.6367650592517, 17.0291404840602, 
               38.1589059297908, 1.68988435353797, 44.3470254347844, 54.3791753572332, 
               54.1254024420639, 16.7068959274805, 20.4041257406988, 16.4454460301124, 
               16.4454460301124, 8.2723668520959, 53.6203546076573, 62.5045709551025, 
               12.2459204536207, 9.22329676942507, 5.7792679949991, 2.38186988585599, 
               0.165736544882611, 0.0947174810712609, 0.121937190100354, 0.0612608284110226, 
               0.209582764473015, 110.686516408962, 110.686516408962, 174.175121789642, 
               6.43401221113061, 6.99601566968409, 13.0691029951793, 8.16527816874731, 
               25.5403264230218, 3.37632140891662, 73.2863812372514, 73.2863812372514, 
               5.40724311631458, 4.3511478928525, 3.0924337347319, 24.2461696230247, 
               4.40826514770383, 6.44907373187433, 3.17012569834367, 2.29749753259154, 
               101.114497807569, 2.52603882113079, 8.22973274948266, 18.9894377026868, 
               45.3069939208448, 45.3069939208448, 11.9416078254155, 11.9486350373268, 
               32.9240231427121, 96.0948240321636, 307.258505604886, 192.097680945091, 
               140.080794803235, 140.080794803235, 637.521564474171, 152.226193242136, 
               315.999796784978, 193.34363348073, 266.270768307819, 173.799808411226, 
               182.80506220341, 93.155777303901, 898.031401695198, 14.0273196020002, 
               13.7651661705012, 7.5391372070276, 10.3718670256097, 15.5980724763303, 
               11.6445466572677, 13.5231872101726, 11.4859862691403, 16.1857080827976, 
               12.2572900155232, 12.3191229711659, 8.64681072373742, 7.030351150386, 
               8.66335759583855, 8.1917463307521, 3.72660210173724, 6.71538057986171, 
               1.28714324807081, 106.243490423264, 2.76739240223252, 12.0756823944305, 
               8.16414865140039, 0.756691951123608, 9.53321559747131, 15.5753793541533, 
               20.1756235562448, 29.8586300846883, 39.7105884758099, 18.4216474152794, 
               5.08111734621525, 12.3972069380021, 9.97946368843419, 10.6397066978921, 
               10.7616739979485, 11.1108991790955, 8.24566384439927, 8.45803066644585, 
               11.3155329768944, 23.5987262810047, 2.11905181120223, 24.3470524307481, 
               16.2690108538126, 11.4299157728698, 494.41125543652, 316.796605305307, 
               0.841350834791372, 28.9431342620103, 20.4184671664909, 19.6796940822581, 
               46.9743896738343, 85.833030984363, 65.0936523074564, 27.1051356214065, 
               11.863741613657, 9.06135347748394, 6.55163573255006, 21.6955321676609, 
               15.9970881291107, 17.8188045629321, 14.7953421317373, 3.90456139689127, 
               21.9395514941267, 2.00472617649597, 36.6318505160651, 98.8723960859749, 
               32.908532466654, 26.6771290217699, 5.64559516059641, 0.450736514094755, 
               19.4329439521026, 4.41969905117152, 23.5060977834407, 27.2129518690992, 
               51.7455708448061, 30.4257930252157, 40.443921181025, 4.30190245375279, 
               90.2505023508511, 54.0774397319126, 19.3002490319766, 18.0110531429976, 
               15.5644728379983, 18.1478418185003, 13.1489976929972, 20.3529482991154, 
               27.0999621460897, 44.5863613632928, 12.0969255582433, 7.02769737058904, 
               8.01116473877482, 8.05142942075726, 19.1846360788885, 0.225930874876243, 
               82.7310809670941, 92.0313471778572, 49.7014880066056), `sigma_tau[1,1]` = c(1.35815093614263, 
               1.35815093614263, 1.35815093614263, 7.92085117028492, 3.39111615812835, 
               1.69157980156894, 9.73117666912177, 68.2918116592815, 65.4135050699289, 
               75.9977787151454, 179.086671653082, 0.510667449840259, 34.458524437158, 
               23.9952924663083, 6711.79953675418, 344.770897952409, 97.0601675892021, 
               50.4605180185304, 31512.2264486603, 15646.371115623, 13172.2396774872, 
               7.02777716571577, 7.02777716571577, 6.88685208444594, 13.1588452764771, 
               18.5004479420836, 20108.9258761386, 10656.3883213956, 10656.3883213956, 
               5062.64651339685, 4330.02010278596, 2928.62058903315, 15.977566302923, 
               0.193159170270165, 0.193159170270165, 5.16841442684522, 5.37085406077427, 
               17.5468703926201, 114.082600465977, 114.082600465977, 160.717927459009, 
               494.210975437922, 109.127675913111, 18.1395992715674, 16.6936758244953, 
               45.5116667364795, 203.481219026877, 6826.81058982303, 5167.28976402318, 
               5167.28976402318, 2.97156513797599, 524.99862944822, 7275.2838541986, 
               1694.43933550591, 37815.8406082484, 36348.2681899903, 1.09054191839619, 
               30.087178133716, 12.1202467074647, 9.92854144695271, 9.85423000585171, 
               1399.98047383513, 232.989500864703, 232.989500864703, 4209.95259892116, 
               1.40095112759324, 0.736712668686883, 25.4852875207036, 39.2497921951503, 
               362.012052970343, 493.653161528911, 18.8452042279338, 18.8452042279338, 
               0.701343390838751, 0.558725209450419, 1.1749513895106, 5.27045177733999, 
               87.1357568556859, 27.9697119683418, 320.161994469013, 4.14566953053361, 
               125.953313915824, 209.09002537297, 124026.956938448, 210.342818175045, 
               608.525369055154, 608.525369055154, 200.697230529732, 585.368798288768, 
               339.919460846134, 47.0664934104275, 11.6622323807375, 5.29528495314276, 
               6.66835662998117, 6.66835662998117, 27.8509855247637, 1458.93749800627, 
               5771.82577328143, 3779.0058410416, 8014.35548649693, 15360.5278331627, 
               0.677405530533669, 0.784982961878541, 0.518799440202167, 387.887241888498, 
               221.398952939529, 67.3228099884269, 54.8238722094737, 240.187847037696, 
               105.756617663037, 1.07623014836446, 0.915380229230957, 0.797830328520427, 
               10215.5427411473, 6170.69611922919, 117.48592914961, 329.428448797761, 
               252.096566621693, 146.933148022692, 7.46970393861729, 13.6815970280147, 
               220.630842911458, 67.2626853334008, 217.804000645566, 266.888646518667, 
               9.16199204904388, 3.72186028787848, 16.843688262468, 21.6855060550957, 
               38.9576477623452, 35.5423129074492, 93.7143466322108, 357.545337889557, 
               0.581110568392006, 0.629793256030772, 1640.49190998072, 1968.52665737435, 
               1615.3025240839, 9971.21639448231, 0.957761283751065, 1.98493369691009, 
               0.719340579814297, 13859.4861069557, 71.718972564582, 539.65292463306, 
               316.442509626324, 1.84953570959966, 1723.96997168518, 1879.00753169267, 
               2.86275891739639, 656.215687807756, 3.49578038228814, 4239.29205610752, 
               8279.63911098726, 6938.8004086984, 2516.75935266825, 61.2948633587676, 
               39.8311946023318, 34.5118211655997, 483.041067621489, 2.54286365632703, 
               117.924043854302, 44.374446928755, 188.02620561753, 172.796644365489, 
               2.12423900406855, 865.506926495678, 22.1761549854099, 95.859251945181, 
               29.4937804720905, 330.02224598524, 10.6597974850592, 14.9619203372084, 
               1643.69560623959, 1.53338486712574, 1934.03190073815, 664.086244179804, 
               5.69206683369817, 2591.28253632599, 1379.54387770224, 10.8494452885903, 
               398.270311488714, 206.127594299811, 208.160220980107, 255.12248479534, 
               305.3508477596, 166.855482362337, 66.7098879273636, 124.622132233393, 
               64.8088062191969, 19.9872921058117, 731.843116150612, 599.939112666961, 
               365.370580380108, 251.214783399181, 152.13475361126, 31.6742376408668, 
               844.75191746324, 677.283285223117, 469.731901561558), `sigma_tau[2,1]` = c(-3.19273077051101, 
               -3.19273077051101, -3.19273077051101, 6.15843121969432, 9.66421395570175, 
               2.59128655426943, 6.75035660072318, -26.8644247072897, 103.817006302054, 
               11.2649113888521, 9.2384423944201, 4.97634413842728, -10.3667130885659, 
               21.9581002944457, -57.7114151512025, -5.52450932789337, 2435.19614494666, 
               169.494725431508, 169.874007592176, 1434.09935872235, 1360.27408223664, 
               1.06548810104996, 1.06548810104996, -1.35770424978012, -8.2213982488, 
               6.5612751874291, 590.466487467336, -242.949122052811, -242.949122052811, 
               -49.9633971346434, 93.3261136879245, 54.8966046321451, -10.6958231848479, 
               0.252590411437961, 0.252590411437961, 0.767178797204738, -0.0342233045391665, 
               -0.713589339515208, 4.88473353005132, 4.88473353005132, -20.5955472074581, 
               -140.243849795895, 5.84907149266758, 21.0408209980277, 25.5817542150834, 
               93.0916443491764, -0.0425008742797469, 513.266578894399, 354.012918824057, 
               354.012918824057, -3.35669791641242, -261.999888318308, -781.879820473476, 
               81.011858350842, -51.7037240024515, -426.39105111561, -0.943425011929718, 
               -0.371403144982359, -0.0658890437033913, -0.0914633812734774, 0.1135448459171, 
               -4.56052350426244, -1011.24863953612, -1011.24863953612, 6087.77891019619, 
               -6.10332963271596, -5.1323981091562, 56.7212659088612, -43.9282802081152, 
               43.9172184780767, -29.0646694498813, -115.459232811455, -115.459232811455, 
               -0.966987343310643, 1.9201262264613, -1.57486271154179, 28.4705549180299, 
               -15.7543079111534, 7.67278576147828, -1.30781824429597, -2.66307322646154, 
               -171.630810564924, -11.0216536479403, -799.526525973182, 47.3200417645166, 
               -476.98761011858, -476.98761011858, 9.45883237695047, -36.5073818826267, 
               256.613131833644, -212.957478611268, 250.840524372903, 164.208734425633, 
               191.294787921134, 191.294787921134, -1422.33372789525, 1691.9463293773, 
               2667.46421334709, 2551.50506757677, -10442.5393526696, 10697.5661976203, 
               -39.6803182869246, 29.42841392168, -96.3978831214674, 89.7019514358137, 
               -62.5243610145332, 36.008148187891, 31.6320249301148, -24.1019316736984, 
               -51.6375535080538, 5.9630807039912, -0.797617987204107, 0.0301606538121368, 
               -85.9069905634064, 581.993630353274, -56.411039775687, -12.3338836582909, 
               -44.4228536623358, -42.5422374523159, 4.23737029054287, 0.148003150800285, 
               1.2421555378212, 22.6781474962016, -6.18888507626403, 66.6388333122994, 
               -8.42998387951971, -0.304010313340146, 9.22167043026536, -5.19216011154436, 
               -5.2752601366741, 28.0580800337671, -177.341881672298, -74.1265786133458, 
               -0.9859801747341, 4.19524754743129, 224.381348114387, 152.953268260423, 
               163.444513884397, -587.714302623828, -1.30916337094371, -3.62078647567726, 
               -5.01331494052042, -1083.47091336076, 1.04192777337224, -207.778413933421, 
               -155.925206085362, 4.52057115162197, -5790.90684118342, -4658.25285388655, 
               0.325023399050644, -153.028406348612, -12.340266990468, -361.12708738291, 
               3450.19613551009, 896.158998931776, -81.7279015904396, -0.954311609338396, 
               -0.730243517920396, -0.395427858464469, 4.45416201101017, -14.8993175031973, 
               72.8500104965703, -21.1873098500063, -115.585480612891, 21.5580322667971, 
               5.82329391603403, 22.0282493597145, 90.2185346414297, 399.705633671401, 
               -73.7785224902129, -54.7154122936915, 5.79029718907974, 0.244127790012138, 
               -80.0944444623329, -0.0894811011721715, -283.851302952333, 354.640243154922, 
               -62.6171254533764, -787.204778499659, -688.151698556048, 6.7059596022256, 
               554.129192758211, 398.85079136247, -142.489893012953, 33.0831044653106, 
               -38.3368369916926, -40.7121553236372, -18.3253959859612, 109.638003432206, 
               -39.3334041817396, -129.799821055184, -199.112497632409, -46.117136010827, 
               43.2937899047657, 44.0691424799278, -74.6642118751589, 0.294580914899512, 
               559.032599075548, -1118.23141159638, -747.946199420435), `sigma_tau[1,2]` = c(-3.19273077051101, 
               -3.19273077051101, -3.19273077051101, 6.15843121969432, 9.66421395570175, 
               2.59128655426943, 6.75035660072318, -26.8644247072897, 103.817006302054, 
               11.2649113888521, 9.2384423944201, 4.97634413842728, -10.3667130885659, 
               21.9581002944457, -57.7114151512025, -5.52450932789337, 2435.19614494666, 
               169.494725431508, 169.874007592176, 1434.09935872235, 1360.27408223664, 
               1.06548810104996, 1.06548810104996, -1.35770424978012, -8.2213982488, 
               6.5612751874291, 590.466487467336, -242.949122052811, -242.949122052811, 
               -49.9633971346434, 93.3261136879245, 54.8966046321451, -10.6958231848479, 
               0.252590411437961, 0.252590411437961, 0.767178797204738, -0.0342233045391665, 
               -0.713589339515208, 4.88473353005132, 4.88473353005132, -20.5955472074581, 
               -140.243849795895, 5.84907149266758, 21.0408209980277, 25.5817542150834, 
               93.0916443491764, -0.0425008742797469, 513.266578894399, 354.012918824057, 
               354.012918824057, -3.35669791641242, -261.999888318308, -781.879820473476, 
               81.011858350842, -51.7037240024515, -426.39105111561, -0.943425011929718, 
               -0.371403144982359, -0.0658890437033913, -0.0914633812734774, 0.1135448459171, 
               -4.56052350426244, -1011.24863953612, -1011.24863953612, 6087.77891019619, 
               -6.10332963271596, -5.1323981091562, 56.7212659088612, -43.9282802081152, 
               43.9172184780767, -29.0646694498813, -115.459232811455, -115.459232811455, 
               -0.966987343310643, 1.9201262264613, -1.57486271154179, 28.4705549180299, 
               -15.7543079111534, 7.67278576147828, -1.30781824429597, -2.66307322646154, 
               -171.630810564924, -11.0216536479403, -799.526525973182, 47.3200417645166, 
               -476.98761011858, -476.98761011858, 9.45883237695047, -36.5073818826267, 
               256.613131833644, -212.957478611268, 250.840524372903, 164.208734425633, 
               191.294787921134, 191.294787921134, -1422.33372789525, 1691.9463293773, 
               2667.46421334709, 2551.50506757676, -10442.5393526696, 10697.5661976203, 
               -39.6803182869246, 29.42841392168, -96.3978831214674, 89.7019514358137, 
               -62.5243610145332, 36.008148187891, 31.6320249301148, -24.1019316736984, 
               -51.6375535080538, 5.9630807039912, -0.797617987204107, 0.0301606538121368, 
               -85.9069905634064, 581.993630353274, -56.411039775687, -12.3338836582909, 
               -44.4228536623359, -42.5422374523159, 4.23737029054287, 0.148003150800285, 
               1.2421555378212, 22.6781474962016, -6.18888507626403, 66.6388333122994, 
               -8.42998387951971, -0.304010313340146, 9.22167043026536, -5.19216011154436, 
               -5.2752601366741, 28.0580800337671, -177.341881672298, -74.1265786133458, 
               -0.9859801747341, 4.19524754743129, 224.381348114387, 152.953268260423, 
               163.444513884397, -587.714302623828, -1.30916337094371, -3.62078647567726, 
               -5.01331494052042, -1083.47091336076, 1.04192777337224, -207.778413933421, 
               -155.925206085362, 4.52057115162197, -5790.90684118342, -4658.25285388655, 
               0.325023399050644, -153.028406348612, -12.340266990468, -361.12708738291, 
               3450.19613551009, 896.158998931776, -81.7279015904396, -0.954311609338395, 
               -0.730243517920396, -0.395427858464469, 4.45416201101017, -14.8993175031973, 
               72.8500104965703, -21.1873098500063, -115.585480612891, 21.5580322667971, 
               5.82329391603403, 22.0282493597145, 90.2185346414297, 399.705633671401, 
               -73.7785224902129, -54.7154122936914, 5.79029718907974, 0.244127790012138, 
               -80.0944444623329, -0.0894811011721715, -283.851302952333, 354.640243154922, 
               -62.6171254533764, -787.204778499659, -688.151698556048, 6.7059596022256, 
               554.129192758211, 398.85079136247, -142.489893012953, 33.0831044653106, 
               -38.3368369916926, -40.7121553236372, -18.3253959859612, 109.638003432206, 
               -39.3334041817396, -129.799821055184, -199.112497632409, -46.117136010827, 
               43.2937899047657, 44.0691424799278, -74.6642118751589, 0.294580914899512, 
               559.032599075548, -1118.23141159638, -747.946199420435), `sigma_tau[2,2]` = c(8.76077006665221, 
               8.76077006665221, 8.76077006665221, 42.4946020171353, 153.494289831976, 
               162.042489656518, 99.4098897289286, 942.812886030293, 871.494797455803, 
               55.2818260225638, 8.6654883508267, 1137.99809797418, 126.492165510502, 
               34.1632269094823, 1.41519687397698, 0.231771344509793, 131653.075080869, 
               77285.9112659495, 6.17583279220422, 2718.79983338349, 927.476614090232, 
               36.3071686914756, 36.3071686914756, 29.981202533812, 46.26863436332, 
               26.4825684231907, 493.130570202704, 36.3483994829545, 36.3483994829545, 
               13.6973999528023, 22.612674018651, 119.22710603516, 39.74316921224, 2.31132989742558, 
               2.31132989742558, 2.63106361407272, 1.3370123397226, 10.4247796434003, 
               311.055481755241, 311.055481755241, 289.991625625857, 1456.10210175862, 
               2.85570912833245, 1966.65866491341, 2957.09471253272, 2929.55918951537, 
               279.120371531666, 416.328347242248, 270.45269512934, 270.45269512934, 
               68.4320533356551, 2875.14242825091, 3906.82139028144, 149.962567756405, 
               85.0692032968868, 33.3999385580209, 5.67330415314762, 0.0274686023096256, 
               0.00897140122048467, 0.0148686783295698, 0.00375288909760476, 0.0439249351641514, 
               12251.5049147515, 12251.5049147515, 30336.9730504365, 41.3965131329778, 
               48.9442352504654, 170.801453098605, 66.6717675730215, 652.308273794504, 
               11.3995462563087, 5370.89367485175, 5370.89367485175, 29.2382781189314, 
               18.9324879854747, 9.56314640370789, 587.876741388487, 19.4328016124602, 
               41.5905519991515, 10.049696943299, 5.27849491226421, 10224.1416668768, 
               6.38087212585982, 67.7285011279074, 360.598744264225, 2052.72369814347, 
               2052.72369814347, 142.601997456024, 142.769879255234, 1083.99129990184, 
               9234.2152057725, 94407.7892665475, 36901.5190244818, 19622.6290727059, 
               19622.6290727059, 406433.745169594, 23172.8139089921, 99855.8715681475, 
               37381.7606075307, 70900.1220552361, 30206.3734037787, 33417.6907671926, 
               8677.99884509399, 806460.398430642, 196.765695216659, 189.479799701512, 
               56.838589826388, 107.575625596929, 243.299864976852, 135.595466853284, 
               182.876592321376, 131.927880574878, 261.977146141541, 150.241158524644, 
               151.760790778708, 74.7673356921404, 49.4258372977338, 75.0537648333735, 
               67.1047079473905, 13.8875632246724, 45.0963363323838, 1.65673774105427, 
               11287.6792573183, 7.65846070793429, 145.82210529116, 66.6533232021628, 
               0.572582708895252, 90.8821996278702, 242.592442025786, 407.055785883299, 
               891.537790534251, 1576.93083709512, 339.35709349287, 25.8177534860095, 
               153.690739863648, 99.5896955087766, 113.20335861717, 115.81362723812, 
               123.452080568025, 67.9909722348334, 71.5382827545383, 128.041286551184, 
               556.899882085782, 4.49038057855943, 592.778962065597, 264.680714161473, 
               130.642974574898, 244442.489502315, 100360.089132966, 0.707871227204139, 
               837.705020908755, 416.913801429065, 387.290359171266, 2206.59328522923, 
               7367.30920796262, 4237.18357072402, 734.688377054842, 140.748365075616, 
               82.1081268439103, 42.9239307720268, 470.696116038007, 255.906828610535, 
               317.509796051969, 218.902148795162, 15.2455997020935, 481.343919763436, 
               4.01892704272815, 1341.89247223134, 9775.7507077819, 1082.97150910882, 
               711.669212844157, 31.8727447173497, 0.203163405138291, 377.639310645561, 
               19.5337397029264, 552.536633004673, 740.544749429912, 2677.60410205485, 
               925.728881213267, 1635.71076049697, 18.5063647216042, 8145.15317458098, 
               2924.36948795864, 372.499612696314, 324.398035319884, 242.252814724787, 
               329.344162669309, 172.896140330445, 414.242504466464, 734.407948319494, 
               1987.94361961813, 146.33560796168, 49.3885303325842, 64.1787604717891, 
               64.8255157174356, 368.05026147939, 0.0510447602223448, 6844.43175798388, 
               8469.76886337128, 2470.23791007076), logpd = c(0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0), lp__ = c(-10.6604714234172, -10.6604714234172, 
               -10.6604714234172, -4.52539290150146, -5.97356234426111, -5.89786071269852, 
               -4.40403729283116, -3.78327283491508, -4.34403431845222, -2.85709512457826, 
               -4.6242579338347, -6.29670476845326, -3.78535790185589, -6.33146553407131, 
               -7.13429299302617, -6.92358722168376, -7.56048513656545, -7.27173314345168, 
               -7.17292563729821, -6.55534712001479, -5.87261029731273, -3.9150446468569, 
               -3.9150446468569, -5.40331721180318, -4.73582407273252, -4.87636428083659, 
               -6.24421490968749, -5.8050527042493, -5.8050527042493, -6.53276490759049, 
               -4.72541361022014, -3.83068463829528, -4.10112844897844, -6.7963782405527, 
               -6.7963782405527, -5.75410962531852, -5.52823348196876, -3.90393221308705, 
               -2.89336578937451, -2.89336578937451, -3.74221284651062, -4.5747056476551, 
               -4.83016045514441, -6.11455181315015, -4.40798813271583, -4.17449021903367, 
               -4.40474400069066, -5.23284520848965, -4.42968142195057, -4.42968142195057, 
               -4.31849208635894, -4.88736703825952, -5.40751148048268, -4.98080010896318, 
               -6.09485747536281, -5.6829152677478, -5.64017221392681, -6.99532558958886, 
               -8.90011780670206, -10.4698249223087, -10.7819993751482, -8.97750900748595, 
               -6.57231771327515, -6.57231771327515, -8.37018474519036, -7.58575414482533, 
               -9.69585975473344, -8.2987954468006, -7.00203253018505, -3.85443897592688, 
               -4.7896688334414, -5.59244596642921, -5.59244596642921, -5.18546522603423, 
               -7.2925679185237, -5.71709057323695, -5.45127777866868, -3.47674106255085, 
               -4.39852147514235, -4.06907032113467, -6.01043924988245, -4.79773006507542, 
               -4.32198430017067, -6.15802981939811, -4.92866494181373, -5.37790022562755, 
               -5.37790022562755, -5.75385265804527, -3.51341153363528, -5.11767033953438, 
               -5.9627280470578, -7.05925124667617, -7.60487156981941, -6.34938482192336, 
               -6.34938482192336, -7.00190987392189, -9.43065690556787, -7.1385908532394, 
               -8.43989136531419, -9.71896954114316, -10.7250052589429, -9.41302004801624, 
               -7.76904620539159, -8.93735140539453, -3.3046941626341, -3.17481849496225, 
               -4.37589265723831, -3.8362400562731, -4.26976768704093, -3.60403624660668, 
               -5.10960506032001, -7.38399924708453, -6.46695525216367, -6.22847521603132, 
               -5.62547042418209, -4.30209050968569, -3.0371885077149, -6.62779769731304, 
               -4.14528709293562, -5.66396805864372, -4.26476991116604, -4.90795142497748, 
               -5.46601022370744, -4.37798819030018, -3.39961602493921, -3.87106538705583, 
               -6.0131848756836, -6.39910218042556, -3.45389562302574, -3.13535446609665, 
               -4.16107845393258, -8.66949869564806, -4.14064678955914, -6.00422824310937, 
               -6.88530915395017, -8.07986914448151, -3.86864032210426, -3.9167625099928, 
               -6.65184132663573, -5.89068066784355, -4.3353517282249, -5.59630689355628, 
               -6.69043567500448, -4.42792869263202, -4.61171907087817, -6.9277092107421, 
               -4.68367536564952, -7.37912153909456, -10.2697643165762, -9.37566553047967, 
               -4.28847585649031, -5.70300322961874, -5.60779251452833, -9.44182135906653, 
               -6.42699555793658, -5.42715533813846, -4.96257206022716, -4.48825636243431, 
               -4.46832106698242, -3.0622591914244, -5.62684510839521, -4.91369692467096, 
               -5.08612087820903, -4.57004590252275, -4.94070797735458, -5.87677985061014, 
               -5.09603751326798, -6.39392929700221, -6.32789583881346, -5.70882208946329, 
               -3.89866652712483, -4.22165929251916, -6.30584940695667, -4.44511935589725, 
               -5.12147090862226, -5.2402199393947, -4.97977359915897, -5.96323745821446, 
               -6.42835963181507, -5.39127141035514, -4.37018895884903, -5.07386843229858, 
               -6.86406593297149, -5.2527621024187, -3.69832559044267, -3.67597278323483, 
               -4.56418659297942, -4.62214329589252, -4.0456971991333, -3.2563491597885, 
               -6.64556141878175, -6.00647266368916, -3.32154980394801, -4.29039038526519, 
               -3.6474358804107, -3.89265928207807, -6.55855653702346, -5.47374341422212, 
               -5.51269658932614, -7.21818127069362)), test_grad = FALSE, args = list(
                   append_samples = FALSE, chain_id = 2, control = list(adapt_delta = 0.8, 
                     adapt_engaged = TRUE, adapt_gamma = 0.05, adapt_init_buffer = 75, 
                     adapt_kappa = 0.75, adapt_t0 = 10, adapt_term_buffer = 50, adapt_window = 25, 
                     max_treedepth = 10L, metric = "diag_e", stepsize = 1, stepsize_jitter = 0), 
                   enable_random_init = TRUE, init = "random", init_list = NULL, init_radius = 2, 
                   iter = 200L, method = "sampling", random_seed = "1118437368", refresh = 0L, 
                   sampler_t = "NUTS(diag_e)", save_warmup = TRUE, test_grad = FALSE, 
                   thin = 1L, warmup = 100L), inits = c(1.76509589692496, -1.13923037516596, 
               1, -0.943449078176709, -0.943449078176709, 1, 1.19181608559256, 2.22572025547694, 
               1.42042558187716, -2.50263944483103, -2.50263944483103, 4.95383065564033, 
               0), mean_pars = c(0.0448603791222213, 0.00167939582871669, 1, -0.0268620757748032, 
               -0.0268620757748032, 1, 20.3634653209775, 41.9381208891499, 1079.61193336785, 
               5.52033962422082, 5.52033962422082, 13154.4047892034, 0), mean_lp__ = -5.40259849666711, adaptation_info = "# Adaptation terminated\n# Step size = 0.328583\n# Diagonal elements of inverse mass matrix:\n# 1, 1, 1, 1, 1\n", elapsed_time = c(warmup = 0.008, 
               sample = 0.007), sampler_params = list(accept_stat__ = c(1, 0, 0, 0.971716276269106, 
               0.862825686839757, 0.995240584270897, 0.553185098171958, 0.956430626296432, 
               0.878642741505719, 0.808376016752404, 0.711195232321993, 0.996099708650735, 
               0.156224519452164, 0.983957791010927, 0.998774029371558, 0.872394580836199, 
               0.869417065041158, 0.77431768073394, 0.528728791947196, 0.997317022862125, 
               0.834102035058213, 0.972180892708046, 0.0193450459521022, 0.984649988011788, 
               0.987381099139685, 0.912201394030241, 0.949720281066156, 0.953637540755109, 
               7.45652124008938e-05, 0.985474458771396, 0.988488888098172, 0.991053414716046, 
               0.747182974019891, 0.987131323784855, 0.196633322163071, 0.970874624676872, 
               0.997867638995892, 0.813167883234762, 1, 0.00763895550671832, 0.9839698414716, 
               0.964794407511529, 0.988429030758162, 0.77483623812609, 0.98934361623674, 
               0.372545052684308, 0.882418454890308, 0.986312341376767, 0.973013547910318, 
               0.120814419887958, 0.996811755223542, 0.947677888895932, 0.996539364659705, 
               0.50778568369799, 0.93863935229302, 0.567711833654672, 0.986013863921128, 
               0.973905582710308, 0.422549996101132, 0.931366758333459, 0.73085159025055, 
               0.991657117057982, 0.942224283664229, 8.29746563556953e-12, 0.956034074611363, 
               0.987901995152188, 0.932233193017889, 0.994468083761154, 0.498774248610751, 
               0.974493959381319, 0.897631350097602, 0.855071658611527, 0.00566132623496189, 
               0.999035667360778, 0.847245998775329, 0.878048250203083, 0.815557212363072, 
               1, 0.424903033693614, 0.919006873769368, 0.842029134381501, 0.913694470210831, 
               0.970069544456845, 0.705696207690767, 0.789766863972505, 0.980345834555359, 
               0.000106748284730256, 0.962310968121625, 0.997946359715386, 0.893032716402173, 
               0.758610455786774, 0.973083200996969, 0.780838575662354, 1, 0.00573111913200265, 
               0.999657463853014, 0.831903106359477, 0.996361774175494, 0.708512338657312, 
               0.946605087091162, 0.851101283076543, 0.9946135377342, 1, 0.976767856705993, 
               0.993904115248354, 0.992961585437935, 0.788369482990398, 1, 0.743310371845945, 
               0.99175584807756, 0.994251072912308, 0.584321581745569, 0.96518359238297, 
               0.888349393757415, 0.971075493161776, 0.99982552386942, 1, 0.671046585113007, 
               1, 0.908424248651455, 0.797656334501194, 0.988295470578122, 0.983330488677562, 
               0.892987156269201, 0.991508723976375, 0.9247647662098, 0.876088993782747, 
               0.671589850629031, 0.985283326415056, 0.772317719713, 0.805715906124265, 
               0.629497057299016, 1, 0.992313731849192, 0.814505454517363, 0.798695313169411, 
               0.946709167178151, 0.978159383529139, 0.803757276845957, 0.956876517730266, 
               0.973010029784693, 0.91851469238306, 0.862831544131294, 0.990557891953446, 
               0.944350686892474, 0.772862984740584, 0.999296743731215, 0.920063638576923, 
               0.708644115671245, 0.996116954616208, 0.930699479021783, 0.896893819992924, 
               0.973700651342831, 0.75497241363544, 0.878453891450278, 0.972472737376594, 
               0.890273482003841, 0.999204858548519, 0.989691503636627, 0.998949422821299, 
               0.719100023289538, 0.96896138754062, 0.945613524883731, 0.988434000805693, 
               0.965205528795085, 0.972318546079958, 0.891539017739165, 0.759135741217711, 
               1, 0.994307776191545, 0.733284355769939, 0.991650105814215, 0.987617237061347, 
               0.989468145282135, 0.946231591608649, 0.905799869136396, 0.769195322017196, 
               0.963174497029118, 0.964456859159338, 0.947509635737464, 0.975869088018726, 
               0.957130539625245, 0.772836755549909, 0.981249233903536, 1, 0.997183138867182, 
               0.903646874468889, 0.996434936180219, 0.923403136927003, 0.999888746602731, 
               0.644162579217206, 0.979523689315897, 0.966828966933926, 0.866935691745161, 
               0.909200136291195, 0.715122792997129, 0.959047994494339, 0.615163284610324, 
               0.848040264063927, 0.746457248612605), stepsize__ = c(0.5, 14.3855100957768, 
               2.43116734434214, 0.23979140553843, 0.29915394412059, 0.309703641406174, 
               0.512688397785856, 0.226364451175356, 0.356805462128848, 0.450076359547149, 
               0.460172167190784, 0.348830648089835, 0.653433383611451, 0.0878732702186773, 
               0.160048888931579, 0.304122592825437, 0.389311595193811, 0.492952120301358, 
               0.466815662817003, 0.211674318605647, 0.393479366072309, 0.447151397529503, 
               0.760452536191926, 0.0803838618938946, 0.142608785487008, 0.252592147816511, 
               0.35815826754782, 0.561029650181556, 0.881822760555328, 0.0988183331870069, 
               0.17066383987623, 0.294496041032198, 0.507137592894061, 0.451170928762559, 
               0.759536261081721, 0.158653070041709, 0.255969564103068, 0.439537686977146, 
               0.465714229100278, 0.793682142409989, 0.10898301586745, 0.17888024997515, 
               0.277834120961566, 0.454544193291368, 0.436872495977608, 0.708893209145083, 
               0.256424860389031, 0.320682950138419, 0.512393990139006, 0.78817922938564, 
               0.161717262687462, 0.26346524645036, 0.38038740674249, 0.611873030840903, 
               0.31840192672894, 0.446494058732162, 0.268827103680719, 0.418046735818906, 
               0.629230582308078, 0.276116554547126, 0.377275226543704, 0.330361739567701, 
               0.51249799040828, 0.710336114223221, 0.12788387701035, 0.183320624274814, 
               0.280151726787144, 0.378518634365694, 0.581374823998524, 0.313364984540467, 
               0.459870468913251, 0.572744676735774, 0.651623629236042, 0.128807181995764, 
               0.198032757622824, 0.222459776537384, 0.265665881190206, 0.279166017107368, 
               0.424544324126392, 0.203843972821137, 0.263186119778275, 0.291067069678419, 
               0.370288783125678, 0.524848151259828, 0.442771634972825, 0.440407294863074, 
               0.633039192451336, 0.137664343137246, 0.19151705984388, 0.28429239426399, 
               0.344597559974306, 0.323456476535824, 0.454686393521938, 0.444586588422734, 
               0.654221192913812, 0.151487259767405, 0.223038144473223, 0.240337502539041, 
               0.349866768757722, 0.300179315447908, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229, 0.328582952919229, 0.328582952919229, 
               0.328582952919229, 0.328582952919229), treedepth__ = c(1, 0, 0, 3, 3, 
               2, 2, 4, 2, 4, 2, 4, 3, 3, 4, 4, 4, 2, 4, 5, 2, 3, 1, 3, 3, 3, 3, 4, 
               1, 4, 3, 3, 2, 2, 2, 5, 3, 2, 2, 1, 3, 3, 4, 4, 2, 2, 3, 4, 4, 2, 5, 
               4, 3, 2, 3, 2, 4, 4, 1, 2, 2, 4, 3, 2, 4, 4, 3, 3, 2, 3, 3, 3, 1, 6, 
               3, 3, 3, 4, 2, 3, 4, 4, 3, 3, 3, 2, 1, 4, 3, 3, 4, 3, 2, 2, 2, 5, 3, 
               2, 2, 3, 2, 4, 2, 4, 3, 3, 4, 2, 2, 2, 3, 2, 2, 4, 3, 3, 2, 2, 2, 4, 
               2, 4, 3, 4, 3, 3, 4, 3, 3, 2, 2, 2, 2, 4, 3, 3, 2, 3, 4, 4, 2, 3, 4, 
               4, 4, 2, 4, 4, 2, 4, 4, 4, 4, 2, 3, 2, 3, 4, 2, 4, 4, 3, 2, 2, 3, 4, 
               3, 3, 4, 4, 2, 3, 4, 4, 4, 3, 2, 4, 4, 2, 3, 4, 2, 4, 2, 4, 4, 3, 3, 
               2, 3, 4, 2, 2, 2, 2, 5, 3, 2, 2), n_leapfrog__ = c(1, 1, 1, 15, 11, 7, 
               3, 23, 3, 23, 7, 15, 7, 15, 15, 15, 15, 3, 15, 31, 3, 11, 3, 7, 7, 15, 
               15, 23, 3, 31, 7, 7, 7, 7, 7, 31, 7, 7, 7, 3, 15, 7, 15, 19, 3, 3, 11, 
               15, 15, 3, 31, 15, 7, 7, 11, 3, 31, 15, 3, 7, 3, 15, 15, 6, 15, 31, 7, 
               7, 3, 11, 11, 15, 1, 63, 7, 7, 15, 15, 3, 15, 15, 31, 15, 15, 11, 3, 
               1, 23, 11, 15, 15, 7, 3, 3, 3, 31, 15, 7, 7, 7, 3, 15, 3, 15, 15, 7, 
               15, 7, 3, 7, 11, 3, 3, 15, 7, 15, 7, 3, 3, 15, 3, 15, 15, 15, 11, 11, 
               15, 11, 11, 3, 7, 3, 7, 15, 7, 11, 3, 15, 15, 15, 7, 7, 31, 15, 15, 7, 
               15, 15, 7, 31, 19, 15, 15, 3, 7, 3, 11, 15, 7, 15, 15, 15, 3, 7, 11, 
               15, 15, 11, 15, 15, 3, 11, 15, 15, 15, 11, 3, 15, 15, 3, 15, 15, 7, 15, 
               3, 31, 15, 11, 11, 7, 15, 15, 7, 7, 3, 7, 35, 11, 3, 3), divergent__ = c(0, 
               1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), energy__ = c(21.0769509658883, 
               13.1296083993492, 11.4764332006629, 12.5651776406207, 7.78425951449123, 
               8.13744994920838, 8.44111547151418, 7.06058888750264, 5.26884644656628, 
               5.19270818746537, 6.67394748879151, 7.00822175584721, 8.78759868970892, 
               7.79965201247276, 9.56874974089866, 10.806783417754, 9.11852390949948, 
               9.14305083648611, 12.3100565918934, 9.51347586497467, 8.17218908520597, 
               7.31768236751601, 6.48650222281564, 6.10452087317142, 7.24759593598728, 
               8.63517898466435, 7.58719579595934, 7.07612407616633, 8.02495327748146, 
               10.4123871930525, 7.58766590419174, 5.30952583546355, 5.81925491357643, 
               7.77443344340404, 7.30097163198851, 8.86756159083815, 6.67098168218278, 
               6.62204030640857, 4.18735902326219, 6.04990080048855, 4.36102180998527, 
               6.58168868200955, 6.19633771603193, 7.11527894002693, 5.93673376673183, 
               4.86046652672759, 6.40180971047166, 6.82585796684015, 5.99482234153494, 
               5.48259807782979, 4.97298492080661, 6.59170073315535, 7.1220251009578, 
               7.52419816477868, 8.43239759612229, 8.25952405969419, 7.71031166184756, 
               8.8638214772268, 9.81494399831124, 11.1509465479148, 17.1560861853027, 
               12.3279839465868, 11.1538997353879, 13.8157745945412, 12.5919307824481, 
               12.6767210765102, 11.4070734548251, 11.004746103424, 9.44019439101239, 
               10.4713924105389, 7.00996257184409, 6.16400221950372, 9.53524181850863, 
               7.91167225007447, 9.9228468215482, 10.4950088224625, 10.1875097335087, 
               6.45843496461237, 6.69282280824722, 8.10141481881941, 8.42014718129385, 
               9.06628270236675, 5.93292568288326, 7.91406097463448, 8.29756639779002, 
               6.59318323330501, 9.82527080371376, 10.1470331697454, 6.32619627959728, 
               6.96902939878596, 9.62312325111425, 8.54276360151945, 9.39980386330486, 
               7.82220710812178, 9.12067577717606, 8.07785028447033, 11.5553657819031, 
               11.1561480352744, 10.2428739986812, 11.6826121969467, 12.4727407895722, 
               12.7623641130791, 10.3047102771846, 10.9044761328129, 11.3658851693769, 
               3.6349704350853, 6.02349778337771, 5.01981170105125, 7.3104683326572, 
               4.89893300770692, 5.89366802574605, 9.09800896061955, 8.02594400253322, 
               9.31378552835666, 7.30619127024716, 6.20970553772749, 4.55644193218104, 
               6.907873434597, 7.18861672785347, 7.08472721787734, 8.51614472069658, 
               6.17361975450642, 7.11953626893138, 7.50738825432939, 4.91466707668677, 
               5.12825057112159, 7.97902620779501, 11.3269484600901, 7.35511256132276, 
               5.7036961676989, 5.59473949712602, 9.59319456604734, 9.09362247720473, 
               6.16814906420925, 9.32143998674298, 10.7264267227312, 8.49885734185008, 
               4.307330713237, 7.8230875335588, 9.55689580817852, 6.80739885889218, 
               6.14947777748137, 8.40308800746639, 8.26879985302399, 6.34401596125006, 
               7.96961868383495, 9.43669447527269, 9.74583025314057, 11.2963592602232, 
               14.014126403771, 14.5256062886483, 6.76016176058495, 7.54200335324894, 
               10.8467789757824, 12.4740857229259, 7.00434059124323, 7.39066687151688, 
               6.00299283170983, 5.17949581758331, 4.6240449580397, 7.23688531008952, 
               7.08527564381102, 6.26688154533411, 6.50671977218245, 5.95686848122373, 
               7.54308291108347, 9.93417143319215, 8.75878146611844, 7.9669284178298, 
               7.08850523864607, 10.1938841811872, 4.76863868653018, 7.1117038702811, 
               8.85989187648384, 6.58292489367502, 7.20180323993536, 8.59622690125678, 
               7.9812211112571, 8.01882151505909, 7.8085184232126, 8.3390080117579, 
               6.32133603164674, 8.26882751003807, 8.33622078680814, 5.34358113696579, 
               4.42233314599102, 5.95705830227572, 5.36312923644372, 6.29745253794938, 
               4.32317021653004, 10.2940256931335, 8.36307245853003, 7.61000707660614, 
               4.79297745042251, 5.50296282079231, 7.16982013835938, 8.30216597267981, 
               12.9571768709679, 7.71998518073672, 9.03690011171243)), return_code = 0L)), 
               iter = 200, thin = 1, warmup = 100, chains = 2, n_save = c(200, 200), 
               warmup2 = c(100, 100), permutation = list(c(53L, 96L, 6L, 97L, 55L, 42L, 
               77L, 30L, 71L, 88L, 26L, 70L, 91L, 46L, 23L, 62L, 22L, 8L, 1L, 31L, 35L, 
               28L, 63L, 57L, 66L, 68L, 75L, 73L, 9L, 19L, 37L, 24L, 86L, 21L, 39L, 
               76L, 3L, 84L, 82L, 98L, 15L, 43L, 2L, 99L, 85L, 79L, 12L, 65L, 90L, 87L, 
               33L, 51L, 67L, 72L, 49L, 60L, 92L, 50L, 78L, 45L, 27L, 95L, 83L, 61L, 
               41L, 16L, 59L, 11L, 74L, 17L, 32L, 48L, 14L, 10L, 89L, 5L, 58L, 64L, 
               56L, 36L, 25L, 40L, 18L, 7L, 94L, 93L, 80L, 47L, 4L, 69L, 38L, 100L, 
               34L, 52L, 44L, 81L, 29L, 20L, 54L, 13L), c(28L, 14L, 49L, 54L, 98L, 93L, 
               21L, 70L, 65L, 68L, 94L, 40L, 92L, 24L, 59L, 46L, 95L, 71L, 25L, 30L, 
               86L, 76L, 38L, 51L, 45L, 19L, 84L, 87L, 42L, 61L, 99L, 74L, 55L, 34L, 
               60L, 13L, 35L, 80L, 23L, 7L, 73L, 20L, 63L, 29L, 50L, 78L, 41L, 62L, 
               100L, 27L, 17L, 91L, 82L, 10L, 22L, 31L, 4L, 77L, 48L, 57L, 18L, 85L, 
               97L, 8L, 39L, 53L, 32L, 79L, 52L, 81L, 1L, 90L, 26L, 43L, 72L, 75L, 33L, 
               12L, 96L, 36L, 3L, 47L, 64L, 11L, 69L, 88L, 66L, 37L, 5L, 56L, 44L, 6L, 
               89L, 58L, 83L, 9L, 15L, 16L, 67L, 2L)), pars_oi = c("tau", "tau_k", "Omega", 
               "theta", "sigma_tau", "logpd", "lp__"), dims_oi = list(tau = 2, tau_k = c(0, 
               2), Omega = c(2, 2), theta = 2, sigma_tau = c(2, 2), logpd = numeric(0), 
                   lp__ = numeric(0)), fnames_oi = c("tau[1]", "tau[2]", "Omega[1,1]", 
               "Omega[2,1]", "Omega[1,2]", "Omega[2,2]", "theta[1]", "theta[2]", "sigma_tau[1,1]", 
               "sigma_tau[2,1]", "sigma_tau[1,2]", "sigma_tau[2,2]", "logpd", "lp__"
               ), n_flatnames = 14L), inits = list(list(tau = structure(c(-0.616816768909917, 
           0.971088845056314), .Dim = 2L), tau_k = structure(numeric(0), .Dim = c(0L, 
           2L)), Omega = structure(c(1, 0.883051573810702, 0.883051573810702, 1), .Dim = c(2L, 
           2L)), theta = structure(c(0.141240805767176, 1.7181576140376), .Dim = 2L), 
               sigma_tau = structure(c(0.0199489652137612, 0.214293627459379, 0.214293627459379, 
               2.95206558667537), .Dim = c(2L, 2L)), logpd = 0), list(tau = structure(c(1.76509589692496, 
           -1.13923037516596), .Dim = 2L), tau_k = structure(numeric(0), .Dim = c(0L, 
           2L)), Omega = structure(c(1, -0.943449078176709, -0.943449078176709, 1), .Dim = c(2L, 
           2L)), theta = structure(c(1.19181608559256, 2.22572025547694), .Dim = 2L), 
               sigma_tau = structure(c(1.42042558187716, -2.50263944483103, -2.50263944483103, 
               4.95383065564033), .Dim = c(2L, 2L)), logpd = 0)), stan_args = list(list(
               chain_id = 1L, iter = 200L, thin = 1L, seed = 1118437368L, warmup = 100, 
               init = "random", algorithm = "NUTS", refresh = 0, method = "sampling"), 
               list(chain_id = 2L, iter = 200L, thin = 1L, seed = 1118437368L, warmup = 100, 
                   init = "random", algorithm = "NUTS", refresh = 0, method = "sampling")), 
           stanmodel = new("stanmodel", model_name = "mutau", model_code = structure("data {\n  int<lower=2> K; // number of sites\n  int<lower=2> P; // number of parameters (1 or 2)\n  real tau_hat_k[P,K]; // estimated treatment effects\n  real<lower=0> se_tau_k[P,K]; // s.e. of effect estimates\n  int pooling_type; //0 if none, 1 if partial, 2 if full\n  int<lower=0, upper=1> joint; //is the distribution on parameters (mu and tau) joint?\n  // real prior_upper_sigma_tau[P];\n  vector[P] prior_tau_mean;\n  vector[P] prior_upper_sigma_tau;\n  matrix<lower=0>[P,P] prior_tau_scale;\n\n  //cross-validation variables:\n  int<lower=0> K_test; // number of sites\n  real test_tau_hat_k[P,K_test]; // estimated treatment effects\n  real<lower=0> test_se_k[P,K_test]; // s.e. of effect estimates\n\n}\ntransformed data {\n  int K_pooled; // number of modelled sites if we take into account pooling\n  if(pooling_type == 2)\n    K_pooled = 0;\n  if(pooling_type != 2)\n    K_pooled = K;\n}\nparameters {\n  vector[P] tau;\n  // real<lower=0> sigma_tau[P];\n  vector[P] tau_k[K_pooled];\n  corr_matrix[P] Omega;        //  correlation\n  vector<lower=0>[P] theta;    //  scale\n}\ntransformed parameters {\n  matrix[P,P] sigma_tau;\n  sigma_tau = quad_form_diag(Omega,theta);\n}\n\nmodel {\n  // parameter variance priors\n  // XXX: change this?\n  // theta ~ cauchy(0,10);\n  theta ~ cauchy(0,10);\n  // theta ~ normal(0,100);\n  Omega ~ lkj_corr(3); // pushes towards independence\n\nif(pooling_type != 0) { //hyperparam only if there's pooling\n  if(joint == 1)\n    tau ~ multi_normal(prior_tau_mean, prior_tau_scale);\n  if(joint == 0) {\n    for(p in 1:P)\n      tau[p] ~ normal(prior_tau_mean[p], prior_tau_scale[p,p]);\n  }\n}\nif(pooling_type == 0) {\n  //tau_k's 'take over' tau's prior distribution\n  for (k in 1:K)\n    tau_k[k] ~ multi_normal(prior_tau_mean, prior_tau_scale);\n  //tau is allowed to wander (but not too much), but we won't use it\n  for(p in 1:P){\n    tau[p] ~ normal(0, 1);\n}}\n\n\nif(pooling_type != 2) { //tau_k only if pooling is not full\n  for (k in 1:K) {\n    if(pooling_type == 1) //if 0, then tau_k are NOT linked to tau\n      tau_k[k] ~ multi_normal(tau, sigma_tau);\n    for(p in 1:P)\n      tau_hat_k[p,k] ~ normal(tau_k[k,p], se_tau_k[p,k]);\n  }\n}\nif(pooling_type == 2) {\n  for (k in 1:K) {\n    for(p in 1:P)\n      tau_hat_k[p,k] ~ normal(tau[p], se_tau_k[p,k]);\n  }\n}\n\n\n}\n\ngenerated quantities {\n  real logpd = 0;\n  if(K_test > 0)\n    for(k in 1:K_test){\n      for(p in 1:P) {\n      //sigma_tau[p,p] is questionable!\n      if(pooling_type == 1)\n        logpd += normal_lpdf(test_tau_hat_k[p,k] | tau, sqrt(sigma_tau[p,p]^2 + test_se_k[p,k]^2));\n      if(pooling_type == 2)\n        logpd += normal_lpdf(test_tau_hat_k[p,k] | tau, sqrt(test_se_k[p,k]^2));\n    }}\n}", model_name2 = "mutau"), 
               model_cpp = list(model_cppname = "mutau", model_cppcode = "// Code generated by Stan version 2.19.1\n\n#include <stan/model/model_header.hpp>\n\nnamespace model_mutau_namespace {\n\nusing std::istream;\nusing std::string;\nusing std::stringstream;\nusing std::vector;\nusing stan::io::dump;\nusing stan::math::lgamma;\nusing stan::model::prob_grad;\nusing namespace stan::math;\n\nstatic int current_statement_begin__;\n\nstan::io::program_reader prog_reader__() {\n    stan::io::program_reader reader;\n    reader.add_event(0, 0, \"start\", \"model_mutau\");\n    reader.add_event(95, 93, \"end\", \"model_mutau\");\n    return reader;\n}\n\nclass model_mutau : public prob_grad {\nprivate:\n        int K;\n        int P;\n        std::vector<std::vector<double> > tau_hat_k;\n        std::vector<std::vector<double> > se_tau_k;\n        int pooling_type;\n        int joint;\n        vector_d prior_tau_mean;\n        vector_d prior_upper_sigma_tau;\n        matrix_d prior_tau_scale;\n        int K_test;\n        std::vector<std::vector<double> > test_tau_hat_k;\n        std::vector<std::vector<double> > test_se_k;\n        int K_pooled;\npublic:\n    model_mutau(stan::io::var_context& context__,\n        std::ostream* pstream__ = 0)\n        : prob_grad(0) {\n        ctor_body(context__, 0, pstream__);\n    }\n\n    model_mutau(stan::io::var_context& context__,\n        unsigned int random_seed__,\n        std::ostream* pstream__ = 0)\n        : prob_grad(0) {\n        ctor_body(context__, random_seed__, pstream__);\n    }\n\n    void ctor_body(stan::io::var_context& context__,\n                   unsigned int random_seed__,\n                   std::ostream* pstream__) {\n        typedef double local_scalar_t__;\n\n        boost::ecuyer1988 base_rng__ =\n          stan::services::util::create_rng(random_seed__, 0);\n        (void) base_rng__;  // suppress unused var warning\n\n        current_statement_begin__ = -1;\n\n        static const char* function__ = \"model_mutau_namespace::model_mutau\";\n        (void) function__;  // dummy to suppress unused var warning\n        size_t pos__;\n        (void) pos__;  // dummy to suppress unused var warning\n        std::vector<int> vals_i__;\n        std::vector<double> vals_r__;\n        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());\n        (void) DUMMY_VAR__;  // suppress unused var warning\n\n        try {\n            // initialize data block variables from context__\n            current_statement_begin__ = 2;\n            context__.validate_dims(\"data initialization\", \"K\", \"int\", context__.to_vec());\n            K = int(0);\n            vals_i__ = context__.vals_i(\"K\");\n            pos__ = 0;\n            K = vals_i__[pos__++];\n            check_greater_or_equal(function__, \"K\", K, 2);\n\n            current_statement_begin__ = 3;\n            context__.validate_dims(\"data initialization\", \"P\", \"int\", context__.to_vec());\n            P = int(0);\n            vals_i__ = context__.vals_i(\"P\");\n            pos__ = 0;\n            P = vals_i__[pos__++];\n            check_greater_or_equal(function__, \"P\", P, 2);\n\n            current_statement_begin__ = 4;\n            validate_non_negative_index(\"tau_hat_k\", \"P\", P);\n            validate_non_negative_index(\"tau_hat_k\", \"K\", K);\n            context__.validate_dims(\"data initialization\", \"tau_hat_k\", \"double\", context__.to_vec(P,K));\n            tau_hat_k = std::vector<std::vector<double> >(P, std::vector<double>(K, double(0)));\n            vals_r__ = context__.vals_r(\"tau_hat_k\");\n            pos__ = 0;\n            size_t tau_hat_k_k_0_max__ = P;\n            size_t tau_hat_k_k_1_max__ = K;\n            for (size_t k_1__ = 0; k_1__ < tau_hat_k_k_1_max__; ++k_1__) {\n                for (size_t k_0__ = 0; k_0__ < tau_hat_k_k_0_max__; ++k_0__) {\n                    tau_hat_k[k_0__][k_1__] = vals_r__[pos__++];\n                }\n            }\n\n            current_statement_begin__ = 5;\n            validate_non_negative_index(\"se_tau_k\", \"P\", P);\n            validate_non_negative_index(\"se_tau_k\", \"K\", K);\n            context__.validate_dims(\"data initialization\", \"se_tau_k\", \"double\", context__.to_vec(P,K));\n            se_tau_k = std::vector<std::vector<double> >(P, std::vector<double>(K, double(0)));\n            vals_r__ = context__.vals_r(\"se_tau_k\");\n            pos__ = 0;\n            size_t se_tau_k_k_0_max__ = P;\n            size_t se_tau_k_k_1_max__ = K;\n            for (size_t k_1__ = 0; k_1__ < se_tau_k_k_1_max__; ++k_1__) {\n                for (size_t k_0__ = 0; k_0__ < se_tau_k_k_0_max__; ++k_0__) {\n                    se_tau_k[k_0__][k_1__] = vals_r__[pos__++];\n                }\n            }\n            size_t se_tau_k_i_0_max__ = P;\n            size_t se_tau_k_i_1_max__ = K;\n            for (size_t i_0__ = 0; i_0__ < se_tau_k_i_0_max__; ++i_0__) {\n                for (size_t i_1__ = 0; i_1__ < se_tau_k_i_1_max__; ++i_1__) {\n                    check_greater_or_equal(function__, \"se_tau_k[i_0__][i_1__]\", se_tau_k[i_0__][i_1__], 0);\n                }\n            }\n\n            current_statement_begin__ = 6;\n            context__.validate_dims(\"data initialization\", \"pooling_type\", \"int\", context__.to_vec());\n            pooling_type = int(0);\n            vals_i__ = context__.vals_i(\"pooling_type\");\n            pos__ = 0;\n            pooling_type = vals_i__[pos__++];\n\n            current_statement_begin__ = 7;\n            context__.validate_dims(\"data initialization\", \"joint\", \"int\", context__.to_vec());\n            joint = int(0);\n            vals_i__ = context__.vals_i(\"joint\");\n            pos__ = 0;\n            joint = vals_i__[pos__++];\n            check_greater_or_equal(function__, \"joint\", joint, 0);\n            check_less_or_equal(function__, \"joint\", joint, 1);\n\n            current_statement_begin__ = 9;\n            validate_non_negative_index(\"prior_tau_mean\", \"P\", P);\n            context__.validate_dims(\"data initialization\", \"prior_tau_mean\", \"vector_d\", context__.to_vec(P));\n            prior_tau_mean = Eigen::Matrix<double, Eigen::Dynamic, 1>(P);\n            vals_r__ = context__.vals_r(\"prior_tau_mean\");\n            pos__ = 0;\n            size_t prior_tau_mean_j_1_max__ = P;\n            for (size_t j_1__ = 0; j_1__ < prior_tau_mean_j_1_max__; ++j_1__) {\n                prior_tau_mean(j_1__) = vals_r__[pos__++];\n            }\n\n            current_statement_begin__ = 10;\n            validate_non_negative_index(\"prior_upper_sigma_tau\", \"P\", P);\n            context__.validate_dims(\"data initialization\", \"prior_upper_sigma_tau\", \"vector_d\", context__.to_vec(P));\n            prior_upper_sigma_tau = Eigen::Matrix<double, Eigen::Dynamic, 1>(P);\n            vals_r__ = context__.vals_r(\"prior_upper_sigma_tau\");\n            pos__ = 0;\n            size_t prior_upper_sigma_tau_j_1_max__ = P;\n            for (size_t j_1__ = 0; j_1__ < prior_upper_sigma_tau_j_1_max__; ++j_1__) {\n                prior_upper_sigma_tau(j_1__) = vals_r__[pos__++];\n            }\n\n            current_statement_begin__ = 11;\n            validate_non_negative_index(\"prior_tau_scale\", \"P\", P);\n            validate_non_negative_index(\"prior_tau_scale\", \"P\", P);\n            context__.validate_dims(\"data initialization\", \"prior_tau_scale\", \"matrix_d\", context__.to_vec(P,P));\n            prior_tau_scale = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(P, P);\n            vals_r__ = context__.vals_r(\"prior_tau_scale\");\n            pos__ = 0;\n            size_t prior_tau_scale_j_2_max__ = P;\n            size_t prior_tau_scale_j_1_max__ = P;\n            for (size_t j_2__ = 0; j_2__ < prior_tau_scale_j_2_max__; ++j_2__) {\n                for (size_t j_1__ = 0; j_1__ < prior_tau_scale_j_1_max__; ++j_1__) {\n                    prior_tau_scale(j_1__, j_2__) = vals_r__[pos__++];\n                }\n            }\n            check_greater_or_equal(function__, \"prior_tau_scale\", prior_tau_scale, 0);\n\n            current_statement_begin__ = 14;\n            context__.validate_dims(\"data initialization\", \"K_test\", \"int\", context__.to_vec());\n            K_test = int(0);\n            vals_i__ = context__.vals_i(\"K_test\");\n            pos__ = 0;\n            K_test = vals_i__[pos__++];\n            check_greater_or_equal(function__, \"K_test\", K_test, 0);\n\n            current_statement_begin__ = 15;\n            validate_non_negative_index(\"test_tau_hat_k\", \"P\", P);\n            validate_non_negative_index(\"test_tau_hat_k\", \"K_test\", K_test);\n            context__.validate_dims(\"data initialization\", \"test_tau_hat_k\", \"double\", context__.to_vec(P,K_test));\n            test_tau_hat_k = std::vector<std::vector<double> >(P, std::vector<double>(K_test, double(0)));\n            vals_r__ = context__.vals_r(\"test_tau_hat_k\");\n            pos__ = 0;\n            size_t test_tau_hat_k_k_0_max__ = P;\n            size_t test_tau_hat_k_k_1_max__ = K_test;\n            for (size_t k_1__ = 0; k_1__ < test_tau_hat_k_k_1_max__; ++k_1__) {\n                for (size_t k_0__ = 0; k_0__ < test_tau_hat_k_k_0_max__; ++k_0__) {\n                    test_tau_hat_k[k_0__][k_1__] = vals_r__[pos__++];\n                }\n            }\n\n            current_statement_begin__ = 16;\n            validate_non_negative_index(\"test_se_k\", \"P\", P);\n            validate_non_negative_index(\"test_se_k\", \"K_test\", K_test);\n            context__.validate_dims(\"data initialization\", \"test_se_k\", \"double\", context__.to_vec(P,K_test));\n            test_se_k = std::vector<std::vector<double> >(P, std::vector<double>(K_test, double(0)));\n            vals_r__ = context__.vals_r(\"test_se_k\");\n            pos__ = 0;\n            size_t test_se_k_k_0_max__ = P;\n            size_t test_se_k_k_1_max__ = K_test;\n            for (size_t k_1__ = 0; k_1__ < test_se_k_k_1_max__; ++k_1__) {\n                for (size_t k_0__ = 0; k_0__ < test_se_k_k_0_max__; ++k_0__) {\n                    test_se_k[k_0__][k_1__] = vals_r__[pos__++];\n                }\n            }\n            size_t test_se_k_i_0_max__ = P;\n            size_t test_se_k_i_1_max__ = K_test;\n            for (size_t i_0__ = 0; i_0__ < test_se_k_i_0_max__; ++i_0__) {\n                for (size_t i_1__ = 0; i_1__ < test_se_k_i_1_max__; ++i_1__) {\n                    check_greater_or_equal(function__, \"test_se_k[i_0__][i_1__]\", test_se_k[i_0__][i_1__], 0);\n                }\n            }\n\n\n            // initialize transformed data variables\n            current_statement_begin__ = 20;\n            K_pooled = int(0);\n            stan::math::fill(K_pooled, std::numeric_limits<int>::min());\n\n            // execute transformed data statements\n            current_statement_begin__ = 21;\n            if (as_bool(logical_eq(pooling_type, 2))) {\n                current_statement_begin__ = 22;\n                stan::math::assign(K_pooled, 0);\n            }\n            current_statement_begin__ = 23;\n            if (as_bool(logical_neq(pooling_type, 2))) {\n                current_statement_begin__ = 24;\n                stan::math::assign(K_pooled, K);\n            }\n\n            // validate transformed data\n\n            // validate, set parameter ranges\n            num_params_r__ = 0U;\n            param_ranges_i__.clear();\n            current_statement_begin__ = 27;\n            validate_non_negative_index(\"tau\", \"P\", P);\n            num_params_r__ += P;\n            current_statement_begin__ = 29;\n            validate_non_negative_index(\"tau_k\", \"P\", P);\n            validate_non_negative_index(\"tau_k\", \"K_pooled\", K_pooled);\n            num_params_r__ += (P * K_pooled);\n            current_statement_begin__ = 30;\n            validate_non_negative_index(\"Omega\", \"P\", P);\n            validate_non_negative_index(\"Omega\", \"P\", P);\n            num_params_r__ += ((P * (P - 1)) / 2);\n            current_statement_begin__ = 31;\n            validate_non_negative_index(\"theta\", \"P\", P);\n            num_params_r__ += P;\n        } catch (const std::exception& e) {\n            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());\n            // Next line prevents compiler griping about no return\n            throw std::runtime_error(\"*** IF YOU SEE THIS, PLEASE REPORT A BUG ***\");\n        }\n    }\n\n    ~model_mutau() { }\n\n\n    void transform_inits(const stan::io::var_context& context__,\n                         std::vector<int>& params_i__,\n                         std::vector<double>& params_r__,\n                         std::ostream* pstream__) const {\n        typedef double local_scalar_t__;\n        stan::io::writer<double> writer__(params_r__, params_i__);\n        size_t pos__;\n        (void) pos__; // dummy call to supress warning\n        std::vector<double> vals_r__;\n        std::vector<int> vals_i__;\n\n        current_statement_begin__ = 27;\n        if (!(context__.contains_r(\"tau\")))\n            stan::lang::rethrow_located(std::runtime_error(std::string(\"Variable tau missing\")), current_statement_begin__, prog_reader__());\n        vals_r__ = context__.vals_r(\"tau\");\n        pos__ = 0U;\n        validate_non_negative_index(\"tau\", \"P\", P);\n        context__.validate_dims(\"parameter initialization\", \"tau\", \"vector_d\", context__.to_vec(P));\n        Eigen::Matrix<double, Eigen::Dynamic, 1> tau(P);\n        size_t tau_j_1_max__ = P;\n        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {\n            tau(j_1__) = vals_r__[pos__++];\n        }\n        try {\n            writer__.vector_unconstrain(tau);\n        } catch (const std::exception& e) {\n            stan::lang::rethrow_located(std::runtime_error(std::string(\"Error transforming variable tau: \") + e.what()), current_statement_begin__, prog_reader__());\n        }\n\n        current_statement_begin__ = 29;\n        if (!(context__.contains_r(\"tau_k\")))\n            stan::lang::rethrow_located(std::runtime_error(std::string(\"Variable tau_k missing\")), current_statement_begin__, prog_reader__());\n        vals_r__ = context__.vals_r(\"tau_k\");\n        pos__ = 0U;\n        validate_non_negative_index(\"tau_k\", \"P\", P);\n        validate_non_negative_index(\"tau_k\", \"K_pooled\", K_pooled);\n        context__.validate_dims(\"parameter initialization\", \"tau_k\", \"vector_d\", context__.to_vec(K_pooled,P));\n        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > tau_k(K_pooled, Eigen::Matrix<double, Eigen::Dynamic, 1>(P));\n        size_t tau_k_j_1_max__ = P;\n        size_t tau_k_k_0_max__ = K_pooled;\n        for (size_t j_1__ = 0; j_1__ < tau_k_j_1_max__; ++j_1__) {\n            for (size_t k_0__ = 0; k_0__ < tau_k_k_0_max__; ++k_0__) {\n                tau_k[k_0__](j_1__) = vals_r__[pos__++];\n            }\n        }\n        size_t tau_k_i_0_max__ = K_pooled;\n        for (size_t i_0__ = 0; i_0__ < tau_k_i_0_max__; ++i_0__) {\n            try {\n                writer__.vector_unconstrain(tau_k[i_0__]);\n            } catch (const std::exception& e) {\n                stan::lang::rethrow_located(std::runtime_error(std::string(\"Error transforming variable tau_k: \") + e.what()), current_statement_begin__, prog_reader__());\n            }\n        }\n\n        current_statement_begin__ = 30;\n        if (!(context__.contains_r(\"Omega\")))\n            stan::lang::rethrow_located(std::runtime_error(std::string(\"Variable Omega missing\")), current_statement_begin__, prog_reader__());\n        vals_r__ = context__.vals_r(\"Omega\");\n        pos__ = 0U;\n        validate_non_negative_index(\"Omega\", \"P\", P);\n        validate_non_negative_index(\"Omega\", \"P\", P);\n        context__.validate_dims(\"parameter initialization\", \"Omega\", \"matrix_d\", context__.to_vec(P,P));\n        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Omega(P, P);\n        size_t Omega_j_2_max__ = P;\n        size_t Omega_j_1_max__ = P;\n        for (size_t j_2__ = 0; j_2__ < Omega_j_2_max__; ++j_2__) {\n            for (size_t j_1__ = 0; j_1__ < Omega_j_1_max__; ++j_1__) {\n                Omega(j_1__, j_2__) = vals_r__[pos__++];\n            }\n        }\n        try {\n            writer__.corr_matrix_unconstrain(Omega);\n        } catch (const std::exception& e) {\n            stan::lang::rethrow_located(std::runtime_error(std::string(\"Error transforming variable Omega: \") + e.what()), current_statement_begin__, prog_reader__());\n        }\n\n        current_statement_begin__ = 31;\n        if (!(context__.contains_r(\"theta\")))\n            stan::lang::rethrow_located(std::runtime_error(std::string(\"Variable theta missing\")), current_statement_begin__, prog_reader__());\n        vals_r__ = context__.vals_r(\"theta\");\n        pos__ = 0U;\n        validate_non_negative_index(\"theta\", \"P\", P);\n        context__.validate_dims(\"parameter initialization\", \"theta\", \"vector_d\", context__.to_vec(P));\n        Eigen::Matrix<double, Eigen::Dynamic, 1> theta(P);\n        size_t theta_j_1_max__ = P;\n        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {\n            theta(j_1__) = vals_r__[pos__++];\n        }\n        try {\n            writer__.vector_lb_unconstrain(0, theta);\n        } catch (const std::exception& e) {\n            stan::lang::rethrow_located(std::runtime_error(std::string(\"Error transforming variable theta: \") + e.what()), current_statement_begin__, prog_reader__());\n        }\n\n        params_r__ = writer__.data_r();\n        params_i__ = writer__.data_i();\n    }\n\n    void transform_inits(const stan::io::var_context& context,\n                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,\n                         std::ostream* pstream__) const {\n      std::vector<double> params_r_vec;\n      std::vector<int> params_i_vec;\n      transform_inits(context, params_i_vec, params_r_vec, pstream__);\n      params_r.resize(params_r_vec.size());\n      for (int i = 0; i < params_r.size(); ++i)\n        params_r(i) = params_r_vec[i];\n    }\n\n\n    template <bool propto__, bool jacobian__, typename T__>\n    T__ log_prob(std::vector<T__>& params_r__,\n                 std::vector<int>& params_i__,\n                 std::ostream* pstream__ = 0) const {\n\n        typedef T__ local_scalar_t__;\n\n        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());\n        (void) DUMMY_VAR__;  // dummy to suppress unused var warning\n\n        T__ lp__(0.0);\n        stan::math::accumulator<T__> lp_accum__;\n        try {\n            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);\n\n            // model parameters\n            current_statement_begin__ = 27;\n            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tau;\n            (void) tau;  // dummy to suppress unused var warning\n            if (jacobian__)\n                tau = in__.vector_constrain(P, lp__);\n            else\n                tau = in__.vector_constrain(P);\n\n            current_statement_begin__ = 29;\n            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > tau_k;\n            size_t tau_k_d_0_max__ = K_pooled;\n            tau_k.reserve(tau_k_d_0_max__);\n            for (size_t d_0__ = 0; d_0__ < tau_k_d_0_max__; ++d_0__) {\n                if (jacobian__)\n                    tau_k.push_back(in__.vector_constrain(P, lp__));\n                else\n                    tau_k.push_back(in__.vector_constrain(P));\n            }\n\n            current_statement_begin__ = 30;\n            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Omega;\n            (void) Omega;  // dummy to suppress unused var warning\n            if (jacobian__)\n                Omega = in__.corr_matrix_constrain(P, lp__);\n            else\n                Omega = in__.corr_matrix_constrain(P);\n\n            current_statement_begin__ = 31;\n            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta;\n            (void) theta;  // dummy to suppress unused var warning\n            if (jacobian__)\n                theta = in__.vector_lb_constrain(0, P, lp__);\n            else\n                theta = in__.vector_lb_constrain(0, P);\n\n            // transformed parameters\n            current_statement_begin__ = 34;\n            validate_non_negative_index(\"sigma_tau\", \"P\", P);\n            validate_non_negative_index(\"sigma_tau\", \"P\", P);\n            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> sigma_tau(P, P);\n            stan::math::initialize(sigma_tau, DUMMY_VAR__);\n            stan::math::fill(sigma_tau, DUMMY_VAR__);\n\n            // transformed parameters block statements\n            current_statement_begin__ = 35;\n            stan::math::assign(sigma_tau, quad_form_diag(Omega, theta));\n\n            // validate transformed parameters\n            const char* function__ = \"validate transformed params\";\n            (void) function__;  // dummy to suppress unused var warning\n\n            current_statement_begin__ = 34;\n            size_t sigma_tau_j_1_max__ = P;\n            size_t sigma_tau_j_2_max__ = P;\n            for (size_t j_1__ = 0; j_1__ < sigma_tau_j_1_max__; ++j_1__) {\n                for (size_t j_2__ = 0; j_2__ < sigma_tau_j_2_max__; ++j_2__) {\n                    if (stan::math::is_uninitialized(sigma_tau(j_1__, j_2__))) {\n                        std::stringstream msg__;\n                        msg__ << \"Undefined transformed parameter: sigma_tau\" << \"(\" << j_1__ << \", \" << j_2__ << \")\";\n                        stan::lang::rethrow_located(std::runtime_error(std::string(\"Error initializing variable sigma_tau: \") + msg__.str()), current_statement_begin__, prog_reader__());\n                    }\n                }\n            }\n\n            // model body\n\n            current_statement_begin__ = 42;\n            lp_accum__.add(cauchy_log<propto__>(theta, 0, 10));\n            current_statement_begin__ = 44;\n            lp_accum__.add(lkj_corr_log<propto__>(Omega, 3));\n            current_statement_begin__ = 46;\n            if (as_bool(logical_neq(pooling_type, 0))) {\n\n                current_statement_begin__ = 47;\n                if (as_bool(logical_eq(joint, 1))) {\n                    current_statement_begin__ = 48;\n                    lp_accum__.add(multi_normal_log<propto__>(tau, prior_tau_mean, prior_tau_scale));\n                }\n                current_statement_begin__ = 49;\n                if (as_bool(logical_eq(joint, 0))) {\n\n                    current_statement_begin__ = 50;\n                    for (int p = 1; p <= P; ++p) {\n                        current_statement_begin__ = 51;\n                        lp_accum__.add(normal_log<propto__>(get_base1(tau, p, \"tau\", 1), get_base1(prior_tau_mean, p, \"prior_tau_mean\", 1), get_base1(prior_tau_scale, p, p, \"prior_tau_scale\", 1)));\n                    }\n                }\n            }\n            current_statement_begin__ = 54;\n            if (as_bool(logical_eq(pooling_type, 0))) {\n\n                current_statement_begin__ = 56;\n                for (int k = 1; k <= K; ++k) {\n                    current_statement_begin__ = 57;\n                    lp_accum__.add(multi_normal_log<propto__>(get_base1(tau_k, k, \"tau_k\", 1), prior_tau_mean, prior_tau_scale));\n                }\n                current_statement_begin__ = 59;\n                for (int p = 1; p <= P; ++p) {\n\n                    current_statement_begin__ = 60;\n                    lp_accum__.add(normal_log<propto__>(get_base1(tau, p, \"tau\", 1), 0, 1));\n                }\n            }\n            current_statement_begin__ = 64;\n            if (as_bool(logical_neq(pooling_type, 2))) {\n\n                current_statement_begin__ = 65;\n                for (int k = 1; k <= K; ++k) {\n\n                    current_statement_begin__ = 66;\n                    if (as_bool(logical_eq(pooling_type, 1))) {\n                        current_statement_begin__ = 67;\n                        lp_accum__.add(multi_normal_log<propto__>(get_base1(tau_k, k, \"tau_k\", 1), tau, sigma_tau));\n                    }\n                    current_statement_begin__ = 68;\n                    for (int p = 1; p <= P; ++p) {\n                        current_statement_begin__ = 69;\n                        lp_accum__.add(normal_log<propto__>(get_base1(get_base1(tau_hat_k, p, \"tau_hat_k\", 1), k, \"tau_hat_k\", 2), get_base1(get_base1(tau_k, k, \"tau_k\", 1), p, \"tau_k\", 2), get_base1(get_base1(se_tau_k, p, \"se_tau_k\", 1), k, \"se_tau_k\", 2)));\n                    }\n                }\n            }\n            current_statement_begin__ = 72;\n            if (as_bool(logical_eq(pooling_type, 2))) {\n\n                current_statement_begin__ = 73;\n                for (int k = 1; k <= K; ++k) {\n\n                    current_statement_begin__ = 74;\n                    for (int p = 1; p <= P; ++p) {\n                        current_statement_begin__ = 75;\n                        lp_accum__.add(normal_log<propto__>(get_base1(get_base1(tau_hat_k, p, \"tau_hat_k\", 1), k, \"tau_hat_k\", 2), get_base1(tau, p, \"tau\", 1), get_base1(get_base1(se_tau_k, p, \"se_tau_k\", 1), k, \"se_tau_k\", 2)));\n                    }\n                }\n            }\n\n        } catch (const std::exception& e) {\n            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());\n            // Next line prevents compiler griping about no return\n            throw std::runtime_error(\"*** IF YOU SEE THIS, PLEASE REPORT A BUG ***\");\n        }\n\n        lp_accum__.add(lp__);\n        return lp_accum__.sum();\n\n    } // log_prob()\n\n    template <bool propto, bool jacobian, typename T_>\n    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,\n               std::ostream* pstream = 0) const {\n      std::vector<T_> vec_params_r;\n      vec_params_r.reserve(params_r.size());\n      for (int i = 0; i < params_r.size(); ++i)\n        vec_params_r.push_back(params_r(i));\n      std::vector<int> vec_params_i;\n      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);\n    }\n\n\n    void get_param_names(std::vector<std::string>& names__) const {\n        names__.resize(0);\n        names__.push_back(\"tau\");\n        names__.push_back(\"tau_k\");\n        names__.push_back(\"Omega\");\n        names__.push_back(\"theta\");\n        names__.push_back(\"sigma_tau\");\n        names__.push_back(\"logpd\");\n    }\n\n\n    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {\n        dimss__.resize(0);\n        std::vector<size_t> dims__;\n        dims__.resize(0);\n        dims__.push_back(P);\n        dimss__.push_back(dims__);\n        dims__.resize(0);\n        dims__.push_back(K_pooled);\n        dims__.push_back(P);\n        dimss__.push_back(dims__);\n        dims__.resize(0);\n        dims__.push_back(P);\n        dims__.push_back(P);\n        dimss__.push_back(dims__);\n        dims__.resize(0);\n        dims__.push_back(P);\n        dimss__.push_back(dims__);\n        dims__.resize(0);\n        dims__.push_back(P);\n        dims__.push_back(P);\n        dimss__.push_back(dims__);\n        dims__.resize(0);\n        dimss__.push_back(dims__);\n    }\n\n    template <typename RNG>\n    void write_array(RNG& base_rng__,\n                     std::vector<double>& params_r__,\n                     std::vector<int>& params_i__,\n                     std::vector<double>& vars__,\n                     bool include_tparams__ = true,\n                     bool include_gqs__ = true,\n                     std::ostream* pstream__ = 0) const {\n        typedef double local_scalar_t__;\n\n        vars__.resize(0);\n        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);\n        static const char* function__ = \"model_mutau_namespace::write_array\";\n        (void) function__;  // dummy to suppress unused var warning\n\n        // read-transform, write parameters\n        Eigen::Matrix<double, Eigen::Dynamic, 1> tau = in__.vector_constrain(P);\n        size_t tau_j_1_max__ = P;\n        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {\n            vars__.push_back(tau(j_1__));\n        }\n\n        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > tau_k;\n        size_t tau_k_d_0_max__ = K_pooled;\n        tau_k.reserve(tau_k_d_0_max__);\n        for (size_t d_0__ = 0; d_0__ < tau_k_d_0_max__; ++d_0__) {\n            tau_k.push_back(in__.vector_constrain(P));\n        }\n        size_t tau_k_j_1_max__ = P;\n        size_t tau_k_k_0_max__ = K_pooled;\n        for (size_t j_1__ = 0; j_1__ < tau_k_j_1_max__; ++j_1__) {\n            for (size_t k_0__ = 0; k_0__ < tau_k_k_0_max__; ++k_0__) {\n                vars__.push_back(tau_k[k_0__](j_1__));\n            }\n        }\n\n        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Omega = in__.corr_matrix_constrain(P);\n        size_t Omega_j_2_max__ = P;\n        size_t Omega_j_1_max__ = P;\n        for (size_t j_2__ = 0; j_2__ < Omega_j_2_max__; ++j_2__) {\n            for (size_t j_1__ = 0; j_1__ < Omega_j_1_max__; ++j_1__) {\n                vars__.push_back(Omega(j_1__, j_2__));\n            }\n        }\n\n        Eigen::Matrix<double, Eigen::Dynamic, 1> theta = in__.vector_lb_constrain(0, P);\n        size_t theta_j_1_max__ = P;\n        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {\n            vars__.push_back(theta(j_1__));\n        }\n\n        double lp__ = 0.0;\n        (void) lp__;  // dummy to suppress unused var warning\n        stan::math::accumulator<double> lp_accum__;\n\n        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());\n        (void) DUMMY_VAR__;  // suppress unused var warning\n\n        if (!include_tparams__ && !include_gqs__) return;\n\n        try {\n            // declare and define transformed parameters\n            current_statement_begin__ = 34;\n            validate_non_negative_index(\"sigma_tau\", \"P\", P);\n            validate_non_negative_index(\"sigma_tau\", \"P\", P);\n            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> sigma_tau(P, P);\n            stan::math::initialize(sigma_tau, DUMMY_VAR__);\n            stan::math::fill(sigma_tau, DUMMY_VAR__);\n\n            // do transformed parameters statements\n            current_statement_begin__ = 35;\n            stan::math::assign(sigma_tau, quad_form_diag(Omega, theta));\n\n            if (!include_gqs__ && !include_tparams__) return;\n            // validate transformed parameters\n            const char* function__ = \"validate transformed params\";\n            (void) function__;  // dummy to suppress unused var warning\n\n            // write transformed parameters\n            if (include_tparams__) {\n                size_t sigma_tau_j_2_max__ = P;\n                size_t sigma_tau_j_1_max__ = P;\n                for (size_t j_2__ = 0; j_2__ < sigma_tau_j_2_max__; ++j_2__) {\n                    for (size_t j_1__ = 0; j_1__ < sigma_tau_j_1_max__; ++j_1__) {\n                        vars__.push_back(sigma_tau(j_1__, j_2__));\n                    }\n                }\n            }\n            if (!include_gqs__) return;\n            // declare and define generated quantities\n            current_statement_begin__ = 83;\n            double logpd;\n            (void) logpd;  // dummy to suppress unused var warning\n            stan::math::initialize(logpd, DUMMY_VAR__);\n            stan::math::fill(logpd, DUMMY_VAR__);\n            stan::math::assign(logpd,0);\n\n            // generated quantities statements\n            current_statement_begin__ = 84;\n            if (as_bool(logical_gt(K_test, 0))) {\n                current_statement_begin__ = 85;\n                for (int k = 1; k <= K_test; ++k) {\n\n                    current_statement_begin__ = 86;\n                    for (int p = 1; p <= P; ++p) {\n\n                        current_statement_begin__ = 88;\n                        if (as_bool(logical_eq(pooling_type, 1))) {\n                            current_statement_begin__ = 89;\n                            stan::math::assign(logpd, (logpd + normal_log(get_base1(get_base1(test_tau_hat_k, p, \"test_tau_hat_k\", 1), k, \"test_tau_hat_k\", 2), tau, stan::math::sqrt((pow(get_base1(sigma_tau, p, p, \"sigma_tau\", 1), 2) + pow(get_base1(get_base1(test_se_k, p, \"test_se_k\", 1), k, \"test_se_k\", 2), 2))))));\n                        }\n                        current_statement_begin__ = 90;\n                        if (as_bool(logical_eq(pooling_type, 2))) {\n                            current_statement_begin__ = 91;\n                            stan::math::assign(logpd, (logpd + normal_log(get_base1(get_base1(test_tau_hat_k, p, \"test_tau_hat_k\", 1), k, \"test_tau_hat_k\", 2), tau, stan::math::sqrt(pow(get_base1(get_base1(test_se_k, p, \"test_se_k\", 1), k, \"test_se_k\", 2), 2)))));\n                        }\n                    }\n                }\n            }\n\n            // validate, write generated quantities\n            current_statement_begin__ = 83;\n            vars__.push_back(logpd);\n\n        } catch (const std::exception& e) {\n            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());\n            // Next line prevents compiler griping about no return\n            throw std::runtime_error(\"*** IF YOU SEE THIS, PLEASE REPORT A BUG ***\");\n        }\n    }\n\n    template <typename RNG>\n    void write_array(RNG& base_rng,\n                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,\n                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,\n                     bool include_tparams = true,\n                     bool include_gqs = true,\n                     std::ostream* pstream = 0) const {\n      std::vector<double> params_r_vec(params_r.size());\n      for (int i = 0; i < params_r.size(); ++i)\n        params_r_vec[i] = params_r(i);\n      std::vector<double> vars_vec;\n      std::vector<int> params_i_vec;\n      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);\n      vars.resize(vars_vec.size());\n      for (int i = 0; i < vars.size(); ++i)\n        vars(i) = vars_vec[i];\n    }\n\n    static std::string model_name() {\n        return \"model_mutau\";\n    }\n\n\n    void constrained_param_names(std::vector<std::string>& param_names__,\n                                 bool include_tparams__ = true,\n                                 bool include_gqs__ = true) const {\n        std::stringstream param_name_stream__;\n        size_t tau_j_1_max__ = P;\n        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {\n            param_name_stream__.str(std::string());\n            param_name_stream__ << \"tau\" << '.' << j_1__ + 1;\n            param_names__.push_back(param_name_stream__.str());\n        }\n        size_t tau_k_j_1_max__ = P;\n        size_t tau_k_k_0_max__ = K_pooled;\n        for (size_t j_1__ = 0; j_1__ < tau_k_j_1_max__; ++j_1__) {\n            for (size_t k_0__ = 0; k_0__ < tau_k_k_0_max__; ++k_0__) {\n                param_name_stream__.str(std::string());\n                param_name_stream__ << \"tau_k\" << '.' << k_0__ + 1 << '.' << j_1__ + 1;\n                param_names__.push_back(param_name_stream__.str());\n            }\n        }\n        size_t Omega_j_2_max__ = P;\n        size_t Omega_j_1_max__ = P;\n        for (size_t j_2__ = 0; j_2__ < Omega_j_2_max__; ++j_2__) {\n            for (size_t j_1__ = 0; j_1__ < Omega_j_1_max__; ++j_1__) {\n                param_name_stream__.str(std::string());\n                param_name_stream__ << \"Omega\" << '.' << j_1__ + 1 << '.' << j_2__ + 1;\n                param_names__.push_back(param_name_stream__.str());\n            }\n        }\n        size_t theta_j_1_max__ = P;\n        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {\n            param_name_stream__.str(std::string());\n            param_name_stream__ << \"theta\" << '.' << j_1__ + 1;\n            param_names__.push_back(param_name_stream__.str());\n        }\n\n        if (!include_gqs__ && !include_tparams__) return;\n\n        if (include_tparams__) {\n            size_t sigma_tau_j_2_max__ = P;\n            size_t sigma_tau_j_1_max__ = P;\n            for (size_t j_2__ = 0; j_2__ < sigma_tau_j_2_max__; ++j_2__) {\n                for (size_t j_1__ = 0; j_1__ < sigma_tau_j_1_max__; ++j_1__) {\n                    param_name_stream__.str(std::string());\n                    param_name_stream__ << \"sigma_tau\" << '.' << j_1__ + 1 << '.' << j_2__ + 1;\n                    param_names__.push_back(param_name_stream__.str());\n                }\n            }\n        }\n\n        if (!include_gqs__) return;\n        param_name_stream__.str(std::string());\n        param_name_stream__ << \"logpd\";\n        param_names__.push_back(param_name_stream__.str());\n    }\n\n\n    void unconstrained_param_names(std::vector<std::string>& param_names__,\n                                   bool include_tparams__ = true,\n                                   bool include_gqs__ = true) const {\n        std::stringstream param_name_stream__;\n        size_t tau_j_1_max__ = P;\n        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {\n            param_name_stream__.str(std::string());\n            param_name_stream__ << \"tau\" << '.' << j_1__ + 1;\n            param_names__.push_back(param_name_stream__.str());\n        }\n        size_t tau_k_j_1_max__ = P;\n        size_t tau_k_k_0_max__ = K_pooled;\n        for (size_t j_1__ = 0; j_1__ < tau_k_j_1_max__; ++j_1__) {\n            for (size_t k_0__ = 0; k_0__ < tau_k_k_0_max__; ++k_0__) {\n                param_name_stream__.str(std::string());\n                param_name_stream__ << \"tau_k\" << '.' << k_0__ + 1 << '.' << j_1__ + 1;\n                param_names__.push_back(param_name_stream__.str());\n            }\n        }\n        size_t Omega_j_1_max__ = ((P * (P - 1)) / 2);\n        for (size_t j_1__ = 0; j_1__ < Omega_j_1_max__; ++j_1__) {\n            param_name_stream__.str(std::string());\n            param_name_stream__ << \"Omega\" << '.' << j_1__ + 1;\n            param_names__.push_back(param_name_stream__.str());\n        }\n        size_t theta_j_1_max__ = P;\n        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {\n            param_name_stream__.str(std::string());\n            param_name_stream__ << \"theta\" << '.' << j_1__ + 1;\n            param_names__.push_back(param_name_stream__.str());\n        }\n\n        if (!include_gqs__ && !include_tparams__) return;\n\n        if (include_tparams__) {\n            size_t sigma_tau_j_2_max__ = P;\n            size_t sigma_tau_j_1_max__ = P;\n            for (size_t j_2__ = 0; j_2__ < sigma_tau_j_2_max__; ++j_2__) {\n                for (size_t j_1__ = 0; j_1__ < sigma_tau_j_1_max__; ++j_1__) {\n                    param_name_stream__.str(std::string());\n                    param_name_stream__ << \"sigma_tau\" << '.' << j_1__ + 1 << '.' << j_2__ + 1;\n                    param_names__.push_back(param_name_stream__.str());\n                }\n            }\n        }\n\n        if (!include_gqs__) return;\n        param_name_stream__.str(std::string());\n        param_name_stream__ << \"logpd\";\n        param_names__.push_back(param_name_stream__.str());\n    }\n\n}; // model\n\n}  // namespace\n\ntypedef model_mutau_namespace::model_mutau stan_model;\n\n"), 
               mk_cppmodule = function (x) 
               get(paste0("model_", model_cppname)), dso = new("cxxdso", sig = list(), 
                   dso_saved = logical(0), dso_filename = character(0), modulename = character(0), 
                   system = character(0), cxxflags = character(0), .CXXDSOMISC = <environment>)), 
           date = "Fri Aug 23 12:02:56 2019", .MISC = <environment>), model = "mutau", 
       pooling_metric = structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
       1, 1, 1, 1, 1, 1, 1, 1), .Dim = c(3L, 8L, 1L))), class = "baggr"))
8: group_effects(bg) at C:/github/baggr/R/baggr_plot.R:33
9: treatment_effect(bg) at C:/github/baggr/R/group_effects.R:31

test_mutau.R:123: warning: Test data can be used in the mu tau model
There were 201 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See
http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup

test_mutau.R:123: warning: Test data can be used in the mu tau model
There were 1 chains where the estimated Bayesian Fraction of Missing Information was low. See
http://mc-stan.org/misc/warnings.html#bfmi-low

test_mutau.R:123: warning: Test data can be used in the mu tau model
Examine the pairs() plot to diagnose sampling problems


test_mutau.R:123: warning: Test data can be used in the mu tau model
The largest R-hat is 1.13, indicating chains have not mixed.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#r-hat

test_mutau.R:123: warning: Test data can be used in the mu tau model
Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#bulk-ess

test_mutau.R:123: warning: Test data can be used in the mu tau model
Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#tail-ess

test_mutau.R:123: warning: Test data can be used in the mu tau model
Rhat statistic for 1 parameters exceeded 1.05, with maximum equal to 1.2. This suggests lack of convergence.
 No further warning will be issued.
 Stan model saved as $fit in the returned object. 

--------------------------------------------------------------------------------
/ |   0       | baggr() calls with Rubin model\ |   9   1   | baggr() calls with Rubin model/ |   9   7   | baggr() calls with Rubin model, , 1

           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]      [,8]
2.5%  0.2361601 0.2361601 0.2361601 0.2361601 0.2361601 0.2361601 0.2361601 0.2361601
mean  0.7200827 0.7200827 0.7200827 0.7200827 0.7200827 0.7200827 0.7200827 0.7200827
97.5% 0.9995376 0.9995376 0.9995376 0.9995376 0.9995376 0.9995376 0.9995376 0.9995376

- |  44   9   | baggr() calls with Rubin modelModel type: Aggregate data (Rubin) 
Pooling of effects: none 

Aggregate treatment effect:
No treatment effect estimated as pooling = 'none'.


Treatment effects on mean:
             mean   sd pooling
Alabama      1.06 1.10       0
Alaska      -1.06 0.99       0
Arizona      0.54 0.96       0
Arkansas    -0.59 1.02       0
California   0.70 0.90       0
Colorado    -0.81 0.83       0
Connecticut  1.44 0.99       0
Delaware    -1.18 0.99       0

Model type: Aggregate data (Rubin) 
Pooling of effects: partial 

Aggregate treatment effect:
Mean(tau) = -0.022 with 95% interval -0.903 to 0.757 
SD(tau) = 0.645 with 95% interval 0.021 to 1.798 

Treatment effects on mean:
             mean   sd pooling
Alabama      0.22 0.70    0.72
Alaska      -0.30 0.62    0.72
Arizona      0.15 0.65    0.72
Arkansas    -0.20 0.65    0.72
California   0.15 0.63    0.72
Colorado    -0.24 0.61    0.72
Connecticut  0.31 0.69    0.72
Delaware    -0.43 0.70    0.72

Model type: Aggregate data (Rubin) 
Pooling of effects: full 

Aggregate treatment effect:
Mean(tau) = 0.0019 with 95% interval -0.6554 to 0.6047 
(SD(tau) undefined.)

- |  46   10 1 | baggr() calls with Rubin model| |  56 1 13 1 | baggr() calls with Rubin modelMean treatment effects:
           2.5%     mean    97.5%
[1,] -2.1519023 7.654176 17.18005
[2,] -0.2744434 7.534063 15.42668

SD for treatment effects:
          2.5%     mean    97.5%
[1,] 0.3074616 6.608157 19.97224
[2,] 0.0000000 0.000000  0.00000
\ |  59 1 13 1 | baggr() calls with Rubin modelMean treatment effects:
           2.5%         mean     97.5%
[1,] -0.9028101 -0.021952353 0.7566698
[2,] -0.6553679  0.001861116 0.6047453

SD for treatment effects:
           2.5%      mean    97.5%
[1,] 0.02149967 0.6448744 1.798448
[2,] 0.00000000 0.0000000 0.000000
Mean treatment effects:
           2.5%         mean     97.5%
[1,] -0.9028101 -0.021952353 0.7566698
[2,] -0.6553679  0.001861116 0.6047453

SD for treatment effects:
           2.5%      mean    97.5%
[1,] 0.02149967 0.6448744 1.798448
[2,] 0.00000000 0.0000000 0.000000
| |  60 1 13 1 | baggr() calls with Rubin model/ |  64 1 14 1 | baggr() calls with Rubin model
  |                                                                                                                           |                                                                                                                   |   0%\ |  64 1 16 1 | baggr() calls with Rubin model  |                                                                                                                           |==============                                                                                                     |  12%/ |  64 1 18 1 | baggr() calls with Rubin model  |                                                                                                                           |=============================                                                                                      |  25%\ |  64 1 20 1 | baggr() calls with Rubin model  |                                                                                                                           |===========================================                                                                        |  38%/ |  64 1 22 1 | baggr() calls with Rubin model  |                                                                                                                           |==========================================================                                                         |  50%\ |  64 1 24 1 | baggr() calls with Rubin model  |                                                                                                                           |========================================================================                                           |  62%/ |  64 1 26 1 | baggr() calls with Rubin model  |                                                                                                                           |======================================================================================                             |  75%\ |  64 1 28 1 | baggr() calls with Rubin model/ |  64 1 30 1 | baggr() calls with Rubin model  |                                                                                                                           |=====================================================================================================              |  88%- |  64 1 31 1 | baggr() calls with Rubin model  |                                                                                                                           |===================================================================================================================| 100%
| |  65 1 32 1 | baggr() calls with Rubin model[1] "log predictive density =  63.5371"
/ |  65 1 33 1 | baggr() calls with Rubin model\ |  66 1 34 1 | baggr() calls with Rubin modelx |  67 1 34 1 | baggr() calls with Rubin model [9.3 s]
--------------------------------------------------------------------------------
test_rubin.R:43: warning: (unknown)
There were 35 transitions after warmup that exceeded the maximum treedepth. Increase max_treedepth above 10. See
http://mc-stan.org/misc/warnings.html#maximum-treedepth-exceeded

test_rubin.R:43: warning: (unknown)
Examine the pairs() plot to diagnose sampling problems


test_rubin.R:43: warning: (unknown)
The largest R-hat is 1.05, indicating chains have not mixed.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#r-hat

test_rubin.R:43: warning: (unknown)
Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#bulk-ess

test_rubin.R:43: warning: (unknown)
Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#tail-ess

test_rubin.R:45: warning: (unknown)
Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#bulk-ess

test_rubin.R:45: warning: (unknown)
Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#tail-ess

test_rubin.R:47: warning: (unknown)
Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#bulk-ess

test_rubin.R:47: warning: (unknown)
Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#tail-ess

test_rubin.R:121: skip: printing works
Empty test

test_rubin.R:129: warning: Test data can be used in the Rubin model
There were 1 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See
http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup

test_rubin.R:129: warning: Test data can be used in the Rubin model
Examine the pairs() plot to diagnose sampling problems


test_rubin.R:129: warning: Test data can be used in the Rubin model
Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#bulk-ess

test_rubin.R:129: warning: Test data can be used in the Rubin model
Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#tail-ess

test_rubin.R:148: failure: Extracting treatment/study effects works
treatment_effect(bg5_p)$tau inherits from `matrix` not `array`.

test_rubin.R:207: warning: loocv
There were 2 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See
http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup

test_rubin.R:207: warning: loocv
Examine the pairs() plot to diagnose sampling problems


test_rubin.R:207: warning: loocv
There were 7 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See
http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup

test_rubin.R:207: warning: loocv
Examine the pairs() plot to diagnose sampling problems


test_rubin.R:207: warning: loocv
There were 1 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See
http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup

test_rubin.R:207: warning: loocv
Examine the pairs() plot to diagnose sampling problems


test_rubin.R:207: warning: loocv
There were 6 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See
http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup

test_rubin.R:207: warning: loocv
Examine the pairs() plot to diagnose sampling problems


test_rubin.R:207: warning: loocv
There were 6 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See
http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup

test_rubin.R:207: warning: loocv
Examine the pairs() plot to diagnose sampling problems


test_rubin.R:207: warning: loocv
There were 2 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See
http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup

test_rubin.R:207: warning: loocv
Examine the pairs() plot to diagnose sampling problems


test_rubin.R:207: warning: loocv
There were 2 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See
http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup

test_rubin.R:207: warning: loocv
Examine the pairs() plot to diagnose sampling problems


test_rubin.R:207: warning: loocv
There were 8 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See
http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup

test_rubin.R:207: warning: loocv
Examine the pairs() plot to diagnose sampling problems


test_rubin.R:207: warning: loocv
Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#tail-ess

test_rubin.R:207: warning: loocv
There were 2 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See
http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup

test_rubin.R:207: warning: loocv
Examine the pairs() plot to diagnose sampling problems


test_rubin.R:218: warning: (unknown)
There were 1 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See
http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup

test_rubin.R:218: warning: (unknown)
Examine the pairs() plot to diagnose sampling problems

--------------------------------------------------------------------------------

== Results =====================================================================
Duration: 13.9 s

OK:       131
Failed:   3
Warnings: 52
Skipped:  2
